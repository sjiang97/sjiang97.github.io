<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Reading for Action plan 2</title>
      <link href="/2019/Action/Reading-Action-plan2/"/>
      <url>/2019/Action/Reading-Action-plan2/</url>
      
        <content type="html"><![CDATA[<h3 id="Reading-for-action-plan-for-AGROECOL103"><a href="#Reading-for-action-plan-for-AGROECOL103" class="headerlink" title="Reading for action plan for  AGROECOL103"></a>Reading for action plan for  AGROECOL103</h3><h4 id="Reading-conclusion-2"><a href="#Reading-conclusion-2" class="headerlink" title="Reading conclusion 2:"></a><strong>Reading conclusion 2:</strong></h4><p>In the fourth chapter, the author introduce the history and development of working-class politics and environmental consciousness. Working-class people try their best to form some new definition of environment when they were judging their living environment, which was linked to activism of this group of people. Then, author introduced that economic is another factor in the farming of environment, except race and ethnicity resonate. In a protest done by oil, chemical and atomic workers working near the Mississippi river.  <a id="more"></a>They reach the result to incorporate the environment into the organizing of a labor union, which also shows the importance of environment to chemical workers. The author then discussed the dangerous situation those workers are in, including no warning about stuff they are touching and eating environment. Author then discussed that property taxes is also a big influence to the environment, the effort of reducing tax make environment become worsen. </p><p>The author introduced organizations concerning those questions. The organization author introduced is the labor/community strategy center. Those organization always focus on environmental justice questions in the local area. Author uses Los Angeles as an example because it exists the obvious different rich and poor classes. And then the author discussed events happen in this place, including closing of the farm. This organization realize and collect the working environment of workers and went to send post to let people know and invoke people and government notice. They also focus on the problem of industrial democracy. They also redefined working environment workers should be in. This organization did lots of efforts to protect right of workers and improve working environment in Los Angeles. </p><p>In the last chapter, author introduced other prospects of environmental justice movement, culture and political. The author mentioned the language and culture aspects, injustice language does cause the environment to be injustice. Then, the author discussed that protest traditions promote the environmental justice movement. </p><p>At last, it is the conclusion of this book, author discussed history of environmentalisms and environmental justice movement briefly and the ideology cannot separate with nature in the language of environmentalisms. And the author discussed that people should think about the future. And the poverty and race are always factors in environmentalisms. </p>]]></content>
      
      
      <categories>
          
          <category> Action plan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGROECOL103 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading for Action plan 1</title>
      <link href="/2019/Action/Reading-Action-plan1/"/>
      <url>/2019/Action/Reading-Action-plan1/</url>
      
        <content type="html"><![CDATA[<h3 id="Reading-for-action-plan-for-AGROECOL103"><a href="#Reading-for-action-plan-for-AGROECOL103" class="headerlink" title="Reading for action plan for  AGROECOL103"></a>Reading for action plan for  AGROECOL103</h3><h4 id="Reading-conclusion-1"><a href="#Reading-conclusion-1" class="headerlink" title="Reading conclusion 1:"></a><strong>Reading conclusion 1:</strong></h4><p>At the beginning, the author introduced the history for the environmental justice movement. And the author also point out that this movement has influence on economic and people realize that the bad environment does make influence to everybody on earth. </p><p>In chapter one, author introduced a chain of more middle-class people realize environmental problem and support environment movement and try to reduce the pollution caused by wars. One of the reason could also be people want to go out and do out-door activity. To reach people’s needs, more and more laws get passed. <a id="more"></a>But some efforts focus too much on the rich community and ignore different communities. So, different groups of people start pursuer to represent their voice in the environmental movement, including group of different racism groups, different group of people speaking different language and different working group. </p><p>In the second chapter, author introduced race, ethnicity and the politics of the </p><p>environmental justice movement. Studies represent that poor people need suffer a serious pollution, which could influence their health. In the early period, people connect those barriers with less place to live. So they make effort including formatting affordable housing and education. Those organizations try to get more money from government. Then, the Gulf Coast Tenants Organization gave the thought that environment problem is from history and it is also a racism problem. This organization expand the definition to make environmental justice movement include homelessness and police brutality and unemployment. And the position they are also gave them opportunities to explore and solve those problems. </p><p>In the third chapter, the author introduced the project done by SouthWest Organization. Then the author introduced that the implementation of those efforts are twists and turns. Then, the author introduced environmental challenging people in different jobs suffering, including people in semiconductor industry. They also redefine environment to be where we live, work and play. It could be influenced by multiple factors, including influence from government, employment, worker right and a host of others. </p>]]></content>
      
      
      <categories>
          
          <category> Action plan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGROECOL103 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vegan diet plan implement</title>
      <link href="/2019/Action/Vegan-diet-plan-imp/"/>
      <url>/2019/Action/Vegan-diet-plan-imp/</url>
      
        <content type="html"><![CDATA[<h3 id="This-page-is-for-the-vegan-diet-plan-for-AGROECOL103"><a href="#This-page-is-for-the-vegan-diet-plan-for-AGROECOL103" class="headerlink" title="This page is for the vegan diet plan for  AGROECOL103"></a>This page is for the vegan diet plan for  AGROECOL103</h3><p>Below is what I make and eat for those two days of “Vegan diet for 2 days” Because I realize there will be too many picture if I include the material picture at here. What I am going to do is to sip them and submit but I will only represent the final thing I made and the link of shopping to corresponding material(I will try my best to correspond it with what I bought) at here:</p><h5 id="Day1"><a href="#Day1" class="headerlink" title="Day1:"></a>Day1:</h5><p><strong>Breakfast:</strong> multi-layered pastry(sugar flavor), water</p><p>multi-layered pastry(sugar flavor): Made with <a href="https://www.target.com/p/all-purpose-flour-5lbs-market-pantry-8482/-/A-13474783" target="_blank" rel="noopener">flour</a>, water, <a href="https://grocery.walmart.com/ip/Great-Value-Pure-Granulated-Sugar-4-lb/10315162" target="_blank" rel="noopener">sugar</a>, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>.(I forget to take picture of this at this time, so I use a picture when I did before)<a id="more"></a></p><p><img src="https://5xejma.bn.files.1drv.com/y4mhZfuSQeYnL26q8ND2r4skLC6lx-5Vh1yOOrRL8GouMfjz7UQHNol9cb2rVGaS4GnZfF-q4pii6zSZ_i0qFgCcuQb6J_tZY2hsLP2bV4FFFIACDXjYnnWHqJ4kLUHE0EW3aLpALjb7vF6wso0GNcGEV_Qt-cGvB4-w0EC5GLAUAFTvkOhD8bpdXizCDBmepDGAV7nlcmDU8MA3D2hxdjvwg?width=2250&height=4000&cropmode=none" alt="day1-breakfast"></p><p><strong>Lunch:</strong> Sauteed shredded carrot; shredded cucumber; multi-layered pastry(no flavor); vinegar Chinese cabbage;</p><p>Sauteed shredded carrot: Made with <a href="https://shop.freshmadisonmarket.com/shop#!/?id=23477" target="_blank" rel="noopener">carrot</a>, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Iodized-Salt-26-oz/10448316" target="_blank" rel="noopener">salt</a>, water.</p><p>shredded cucumber: Made with <a href="https://grocery.walmart.com/ip/Cucumber-each/44390954" target="_blank" rel="noopener">cucumber</a></p><p>multi-layered pastry(no flavor): Made with <a href="https://www.target.com/p/all-purpose-flour-5lbs-market-pantry-8482/-/A-13474783" target="_blank" rel="noopener">flour</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Pure-Granulated-Sugar-4-lb/10315162" target="_blank" rel="noopener">sugar</a>, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>.</p><p>vinegar Chinese cabbage: Made with <a href="https://grocery.walmart.com/ip/McCormick-Crushed-Red-Pepper-1-5-oz/13448787" target="_blank" rel="noopener">red pepper</a>, <a href="https://shop.capcentremarket.com/shop#!/?id=12435" target="_blank" rel="noopener">cabbage</a>, <a href="https://www.target.com/p/seasoned-rice-vinegar-12-7oz-market-pantry-8482/-/A-17256634" target="_blank" rel="noopener">vinegar</a>, water, <a href="https://shop.capcentremarket.com/shop#!/?id=12435" target="_blank" rel="noopener">cabbage</a>, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Iodized-Salt-26-oz/10448316" target="_blank" rel="noopener">salt</a></p><p><img src="https://5negma.bn.files.1drv.com/y4mqr6I_rEn-Wn0YF_lZc8TfjqFco0qNhp-UaKxX2F-OQtef35DVZW44E0y4740cSOEbGB82mdAJLfm4RXJZdAXS3gn40C9SN713Ed4h0Du06K-NYkuQKvL4z49PQ1bvshjA0MV5kT-XSyB20nerY9DpdUn0ucIB_yayL3KqE5bUa1F_Q8RxlbSLXWcjLnT59yBV615HNrmr3eKXlQ_NB6Tew?width=4000&height=2250&cropmode=none" alt="day1-lunch"></p><p>I forget to take picture for each of them. In this picture, Sauteed shredded carrot is upper right, shredded cucumber is upper left, vinegar Chinese cabbage is lower left, multi-layered pastry(no flavor) is lower right</p><p><strong>Dinner:</strong>  Sauteed Potato, green pepper and eggplant; rice; Sauteed onion; tomato slices with sugar; </p><p>Sauteed Potato, green pepper and eggplant: (I don’t have eggplant, so I use carrot as a substitute). Made with <a href="https://shop.freshmadisonmarket.com/shop#!/?id=23477" target="_blank" rel="noopener">carrot</a>, <a href="https://shop.capcentremarket.com/shop#!/?id=1564405684703634486" target="_blank" rel="noopener">potato</a>, <a href="https://grocery.walmart.com/ip/Jalapeno-Peppers-approx-3-5-per-0-25-lb/44391018" target="_blank" rel="noopener">pepper</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Corn-Starch-16-oz/54802256" target="_blank" rel="noopener">corn starch</a>, water, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Iodized-Salt-26-oz/10448316" target="_blank" rel="noopener">salt</a>, <a href="https://usa.lkk.com/en/products/mushroom-flavored-dark-soy-sauce" target="_blank" rel="noopener">soy sauce</a>.</p><p><img src="https://5nefma.bn.files.1drv.com/y4membRae8YDf1L5V96Od-6j0aYcjvmB-2uw7aSTc14oDE1h8RHeN6zGwbgD-Uyy6bVwHbL8rphQ49Tt0zTVbla5rGqs1BVdJ_GvV5-6aehq8eaWlHVMFnpR-R8jHmAo93wCtfU5eE4MXAHnad8Sh8MU3ktpLjua2H9Nf16TGL09CZWpwRPgZtKgBYyZufR9krsDZOaohHcsWLDqB134k4lYA?width=4000&height=3000&cropmode=none" alt="day1-dinner-1"></p><p>Sauteed onion: Made with <a href="https://grocery.walmart.com/ip/Yellow-Onions-each/51259212" target="_blank" rel="noopener">onion</a>, water, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Iodized-Salt-26-oz/10448316" target="_blank" rel="noopener">salt</a>.</p><p><img src="https://5neima.bn.files.1drv.com/y4m8HPy_HEX6lZ40JUWmZHemOnEU8qyXAAVi5bN9_ZAtsbE02m4pj-uL_A8fPJyKg06Ow2AXaJSCe1h_Iha7e_tTBXTSNjo0p8jzv-Yt7Uv_xGTjy428kpttv-Q94W6EAo57vJZKA22GAaLBfqAJ5t-hudsLofwjhlDLNvOLQqXqO5Ut04IEgMHa4TX4IO2n8iFh1isNwBkx-qDadHcaLWOrQ?width=3000&height=4000&cropmode=none" alt="day1-dinner-2"></p><p>rice: Made with <a href="https://www.walmart.com/ip/Great-Value-Long-Grain-Enriched-Rice-20-lb/10315883" target="_blank" rel="noopener">rice</a>, water.</p><p>tomato slices with sugar: Made with <a href="https://grocery.walmart.com/ip/Roma-Tomatoes-each/44390944" target="_blank" rel="noopener">tomato</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Pure-Granulated-Sugar-4-lb/10315162" target="_blank" rel="noopener">sugar</a>, water.</p><p><img src="https://5nejma.bn.files.1drv.com/y4m7V0NVpH6jmGRi86Gj2RNMhXlzL-jKBvXYCeX82dlHPSKZFpoc8Sr4hIr71W_d35RL5YcozAiPmOpHDyiSPFPLi6GA1-wCkGZTrfizXT0VdSrmEg_lD9Ow3XnWLRKvH85FfW4a5j3GLVVWhWhfdEmPJd98huhqScNE2EABfC2aZfUGafsHlvFHoNg_13amjRHEaB0suQ88V6g11h7f4az4g?width=3000&height=4000&cropmode=none" alt="day1-dinner-3"></p><p>All food in one picture:</p><p><img src="https://5nh7lw.bn.files.1drv.com/y4mS9j9_V9YDqB_DK-R7etXboVXLBpjJwioa_8sDr7IkmX2zO08kdIwpHeq5PgbFI1d2BteKS7cmd73NHu5WfqPtgXldPogLkwP59t6_xBlb-6cttUDg9SkOVALgI32pVeDiIlJFw3rJWgssMx286leRjZFlP_Ha4-opYE-bPJhvv3K2rrwo32qDFZRT1qSmuSXLE8BF2awSz2aoKRZPpaXWw?width=3000&height=4000&cropmode=none" alt="day1-dinner"></p><p><strong>Desert:</strong> Caramelized apple;</p><p>Caramelized apple: Made with <a href="https://shop.capcentremarket.com/shop#!/?id=1564405684703634718" target="_blank" rel="noopener">apple</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Pure-Granulated-Sugar-4-lb/10315162" target="_blank" rel="noopener">sugar</a>, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, water, <a href="https://grocery.walmart.com/ip/Great-Value-Corn-Starch-16-oz/54802256" target="_blank" rel="noopener">corn starch</a></p><p><img src="https://5xedma.bn.files.1drv.com/y4mXwCIkTyL0pUlc3l_eQCH22-hb3paT1ymTlvu-Znh3lp3-LH2QrA1zf0YgxyeiERXxVmdrkuQ-j0fOIYhOCKaglybB3aLkiNGNcES0_M0qybA47Q_Wgd2QpcJwCm-Qom8Hlts3VJbOLOCZGQDOGel98DxqQ9YrzRVVXCeFMNmrEcIUnyHBEpcTzNhtxQtAXQvXMaUUYhcmggqRsv_FAOL9g?width=4000&height=3000&cropmode=none" alt="day1-desert"></p><h5 id="Day2"><a href="#Day2" class="headerlink" title="Day2:"></a>Day2:</h5><p><strong>Breakfast:</strong> Oat with water;</p><p>Oat with water: Made with <a href="https://www.walmart.com/ip/Quaker-Oats-Quick-1-Minute-Oatmeal-42-oz-Canister/10312442" target="_blank" rel="noopener">oat</a>, water. (This one is pretty common so I didn’t take picture).</p><p><strong>Lunch:</strong> Soy sauce sauteed rice; Sauteed cabbage;</p><p>Soy sauce sauteed rice: Made with <a href="https://www.walmart.com/ip/Great-Value-Long-Grain-Enriched-Rice-20-lb/10315883" target="_blank" rel="noopener">rice</a>, <a href="https://usa.lkk.com/en/products/mushroom-flavored-dark-soy-sauce" target="_blank" rel="noopener">soy sauce</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Mixed-Vegetables-32-oz/730378482" target="_blank" rel="noopener">Mixed frozen vegetable</a>, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Iodized-Salt-26-oz/10448316" target="_blank" rel="noopener">salt</a>, water</p><p><img src="https://5xegma.bn.files.1drv.com/y4m9E_pNeFihxSMAvO_6bB23uyGAtqMCt-FnKXaOFEEY6znFYOKyv_VutewjgYlCKlJHGupf-p_8SkwDd4Hz6wHEPpDQHVq5E9ZX8twNYyxb87FF5BKKpSt0s4BEBnD97ixXaQD25b4OxZrOAyqHEeYsjZoLWjU8osHtS6B2fAyjtCciV8AOQfO6sL8KtBHxvQ2fl5QR5uLgOdJjDcJHN6tUg?width=4000&height=3000&cropmode=none" alt="day2-lunch-1"></p><p>Sauteed cabbage: Made with <a href="https://shop.capcentremarket.com/shop#!/?id=12435" target="_blank" rel="noopener">cabbage</a>, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Iodized-Salt-26-oz/10448316" target="_blank" rel="noopener">salt</a>, water</p><p><img src="https://5xefma.bn.files.1drv.com/y4mZKK5Ogmc40_59DzEC_7r9KZRQWjlrXwV4XFq76za3NpBbq62xK3BRlStYP1MKZNI3qF21rYdIorKKwtubqGthZtH0vj_kK-KkawIoHEcW62V2ryzVrqPulnwq3D2Yp0hOuDPt4LXCpfGvRFhht1-aUsSPifz_L5GZpaQje4ipKJi341uKn5osAWqoqUiRwl3Io-hrAMTUTVX2YUjeUVyHg?width=3000&amp;height=4000&amp;cropmode=none" alt="day2-lunch-2"></p><p>It is definitely true that I do also eat remaining food from yesterday night in this lunch. </p><p><strong>Dinner:</strong> Doughball; vinegar cucumber;</p><p>Doughball: Made with <a href="https://www.target.com/p/all-purpose-flour-5lbs-market-pantry-8482/-/A-13474783" target="_blank" rel="noopener">flour</a>, water, <a href="https://www.target.com/p/peanut-oil-128oz-market-pantry-8482/-/A-12964409" target="_blank" rel="noopener">peanut oil</a>, <a href="https://grocery.walmart.com/ip/Great-Value-Iodized-Salt-26-oz/10448316" target="_blank" rel="noopener">salt</a>, <a href="https://grocery.walmart.com/ip/Fresh-White-Mushrooms-8-oz/10312229" target="_blank" rel="noopener">mushroom</a>, <a href="https://grocery.walmart.com/ip/Roma-Tomatoes-each/44390944" target="_blank" rel="noopener">tomato</a>, <a href="https://shop.capcentremarket.com/shop#!/?id=1564405684703634521" target="_blank" rel="noopener">celery</a></p><p><img src="https://5nehma.bn.files.1drv.com/y4mXIgLm_dCyyY72Z7-2o8fUcdAxmVo5uBLZ_NO99N1lTx94ucAYeYGkPXX3F-fpE8MhZzJ7sk9BEuFRpKrSHvC4HLM6sl8NIYG9ENTfvBKG08wi8Y1qJBFInDP1ZABRYgrBSkEdn3tzxJU6ltxHbeW4vDUqp8IP5Kb736kNCqtNwRiuaqIVv9kO7Y4syDKs42d2SZWdA2QhVhY1XB2az-JYQ?width=3000&amp;height=4000&amp;cropmode=none" alt="day2-dinner-1"></p><p>vinegar cucumber: Made with <a href="https://usa.lkk.com/en/products/mushroom-flavored-dark-soy-sauce" target="_blank" rel="noopener">soy sauce</a>, <a href="https://grocery.walmart.com/ip/Cucumber-each/44390954" target="_blank" rel="noopener">cucumber</a>, water, <a href="https://grocery.walmart.com/ip/Roma-Tomatoes-each/44390944" target="_blank" rel="noopener">tomato</a>, <a href="https://www.target.com/p/seasoned-rice-vinegar-12-7oz-market-pantry-8482/-/A-17256634" target="_blank" rel="noopener">vinegar</a></p><p><img src="https://5xehma.bn.files.1drv.com/y4mT_p3UTj7EaJHwT5Ne-XL3NmY0ebiwP-imeJixDwtwQocL4HNFjWPGRT_2FP-O3_4vv765mgroq94rMQEYfQx0p9byCag7rsnlDKpKJYvXDNLgSILiD09TrMHPhuFn1ggamQE_s2DGz1qMbIqeqVTUXgDm-AsW9jt0Yqv21b0lgGr8_Zl23hfdS8qDl7hVpKmAVpksDwZF5regFdxZ8U40A?width=4000&height=2250&cropmode=none" alt="day2-dinner-2"></p><p><strong>Desert:</strong> Roasted sweet potato</p><p>Roasted sweet potato: Made with <a href="https://grocery.walmart.com/ip/Sweet-Potatoes-each/44390964" target="_blank" rel="noopener">sweet potato</a></p><p><img src="https://5nh6lw.bn.files.1drv.com/y4mjxQvgaQwoOAFurWsR_syS1nA3oQZ_sH_W4Jn8oraxRJnN0r1uwTSeje6kKxS1QJkZ5X0accNWT3JUEdU3fRoUCa8ZpDYCx-vu5CQArEnhJSNrBqdcOYCnhbDCZ8ly3lGYd_bvHw6ZXkiLbCv8Lwjer_m1SdjllcPBuU6lQNxgRioyhP33I_ijYUVDtrEAXUDBrI5tMvYyydfpgl9jd2GyA?width=4000&height=3000&cropmode=none" alt="day2-desert"></p><h5 id="Thinking-and-thoughts"><a href="#Thinking-and-thoughts" class="headerlink" title="Thinking and thoughts:"></a>Thinking and thoughts:</h5><p>It is pretty tired after making so many food. After I finish this experience, I realized that a person could survive well and become not hungry while eating vegan diet. This effort also have a positive effect to the environment and it could also make us live healthier. it would make us healthier since those plants belong to primary producer in the entire food chain. They don’t cumulative toxin. It could also protect environment since this effort could shrink carbon dioxide produced. So, eating vegan diet food occasionally is a good thing. I believe a person could adjust this type of diet if they eat it every day.</p>]]></content>
      
      
      <categories>
          
          <category> Action plan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGROECOL103 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vegan diet plan</title>
      <link href="/2019/Action/Vegan-diet-plan/"/>
      <url>/2019/Action/Vegan-diet-plan/</url>
      
        <content type="html"><![CDATA[<h3 id="This-page-is-for-the-vegan-diet-plan-for-AGROECOL103"><a href="#This-page-is-for-the-vegan-diet-plan-for-AGROECOL103" class="headerlink" title="This page is for the vegan diet plan for  AGROECOL103"></a>This page is for the vegan diet plan for  AGROECOL103</h3><p>Below is what I am going to make and eat for those two days of “Vegan diet for 2 days” :</p><h5 id="Day1"><a href="#Day1" class="headerlink" title="Day1:"></a>Day1:</h5><p><strong>Breakfast:</strong> multi-layered pastry(sugar flavor), water</p><p><strong>Lunch:</strong> Sauteed shredded carrot; shredded cucumber; multi-layered pastry(no flavor); vinegar Chinese cabbage;</p><p>*<em>Dinner: *</em> Sauteed Potato, green pepper and eggplant; rice; Sauteed onion; tomato slices with sugar; </p><p><strong>Desert:</strong> Caramelized apple;</p><h5 id="Day2"><a href="#Day2" class="headerlink" title="Day2:"></a>Day2:</h5><p><strong>Breakfast:</strong> Oat with water</p><p><strong>Lunch:</strong> Soy sauce sauteed rice; Sauteed cabbage;</p><p><strong>Dinner:</strong> Doughball; vinegar cucumber;</p><p><strong>Desert:</strong> Roasted sweet potato</p>]]></content>
      
      
      <categories>
          
          <category> Action plan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGROECOL103 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Action plan</title>
      <link href="/2019/Action/Action-plan/"/>
      <url>/2019/Action/Action-plan/</url>
      
        <content type="html"><![CDATA[<h3 id="This-page-is-for-the-initial-action-plan-for-AGROECOL103"><a href="#This-page-is-for-the-initial-action-plan-for-AGROECOL103" class="headerlink" title="This page is for the initial action plan for  AGROECOL103"></a>This page is for the initial action plan for  AGROECOL103</h3><p>In this semester, I plan to do two large actions to fulfill the requirement of personal project. I choose “Vegan diet for 2 days” and “Read a book about social, environmental or economic justice”. </p><p>For “Read a book about social, environmental or economic justice”. I took a look at some books and choose <em>Where</em> <em>We Live, Work and Play: The Environmental Justice Movement and the Struggle for a New Environmentalism</em> to read. There are six chapters in this book. I am going to finish three chapters and write a response paper of one page of double-spaced Times New Romans, 12 pts with 1-inch as margin by the end of October. And I will read the other three chapters and finish a page of paper with the same format by the end of November. The detailed date of reading and writing will be posted on <a id="more"></a> <a href="http://shaokang.ga/action">shaokang.ga/action</a> once this action plan get approved. And respond paper I wrote will also available at the same website in 24 hours after I finished them. This action does relate to agroecological because this book seems to talk lots about environmental justice. So, I choose to read it.  </p><p>For “Vegan diet for 2 days”, I am going to have vegan diet for two days. Any food I ate will be prepared by using vegetable or grain or stuff made by vegetable or grain, including peanut oil and flour. And it will also contain the basic elements, including water, sugar, salt. Any food material and their ingredients will be pictured, and related links will be provided. Food I made and those pictured will be posted to <a href="http://shaokang.ga/action">shaokang.ga/action</a> no later than 24 hours after each meal. The detailed date, hopefully at a weekend or thanksgiving break, and menu will be provided before the end of October. They will also be posted to <a href="http://shaokang.ga/action">shaokang.ga/action</a> whenever I finished them. It will be good to have an experience of vegan diet. And this is also belonging to agroecological since less meat was eaten.  </p><p>The detail of this action plan might change, including date to do those things. I will inform TA at least 3 weeks before deadline if any change happens. All parts will also be uploaded to canvas within 96 hours after Actions section in canvas become available and related stuff gets finished. </p>]]></content>
      
      
      <categories>
          
          <category> Action plan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AGROECOL103 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Common error while running EOSIO</title>
      <link href="/2019/common-run-eosio/"/>
      <url>/2019/common-run-eosio/</url>
      
        <content type="html"><![CDATA[<h3 id="Common-error-and-solution-during-running-and-building-connections-between-EOSIO-components"><a href="#Common-error-and-solution-during-running-and-building-connections-between-EOSIO-components" class="headerlink" title="Common error and solution during running and building connections between EOSIO components:"></a>Common error and solution during running and building connections between EOSIO components:</h3><blockquote><p>Error 3050000: Action validate exception<br>Error Details:<br>inline action’s authorizing actor eosio.ram does not exist</p></blockquote><p>Solution: Make sure the eosio.ram was created before setting any contracts(eosio.system, eosio.msig). It should also be created before initializing system accounts. Otherwise this error will show up when creating block producer or voter. <a id="more"></a> For more details, see <a href="../../13/EOSIO_local_network/#3">here</a> or <a href="https://developers.eos.io/eosio-nodeos/docs/bios-boot-sequence#section--1-7-create-important-system-accounts-" target="_blank" rel="noopener">here</a>. </p><blockquote><p>Error 3080001: Account using more than allotted RAM usage<br>Error Details:<br>account eosio.ram has insufficient ram; needs 2996 bytes has 0 bytes</p></blockquote><p>Solution: Basically, this error happens when some account has insufficient ram. It depends on the account type you are creating. </p><ul><li>If the account is eosio.***, then it is a system account. If this happens, then make sure the eosio.ram was created before setting any contracts(eosio.system, eosio.msig). It should also be created before initializing system accounts.</li><li>If the account is an arbitrary name, then it is a user account(producer/worker). If this is the case, the common error is using wrong command to create new account. For account other than system account, it seems it is required to use  <code>cleos system newaccount [OPTIONS] creator name OwnerKey [ActiveKey]</code>.</li></ul><blockquote><p>Error 3120003: Locked wallet<br>Ensure that your wallet is unlocked before using it!Error Details:<br>You don’t have any unlocked wallet!</p></blockquote><p>Solution: The wallet need to be unlocked before experiment. </p><blockquote><p>Error 3050001: Account name already exists<br>Error Details:<br>Cannot create account named bp1111111111, as that name is already taken</p></blockquote><p>Solution: Use another name.</p><blockquote><p>Error 3050003: eosio_assert_message assertion failure<br>Error Details:<br>assertion failure with message: cannot use transfer flag if delegating to self</p></blockquote><p>Solution: It seems –transfer tag for self transfer is for some old version of EOSIO. Remove it if error happens. Though the error happens, the command still get executed sometime. </p><blockquote><p>assertion failure with message: system contract must first be initialized</p></blockquote><p>Solution: Make sure <code>eosio.msig</code> is a privileged account and Initialize system account. To do those:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cleos push action eosio setpriv <span class="string">'["eosio.msig", 1]'</span> -p eosio@active</span><br><span class="line"></span><br><span class="line">cleos push action eosio init <span class="string">'["0", "4,SYS"]'</span> -p eosio@active</span><br></pre></td></tr></table></figure><blockquote><p>Not producing block because I don’t have the private key for EOS5ks6trFhN8xz5mxaDAwQy7qJdjHhNwQbLca6wkYuRKwvGDUAPG</p></blockquote><p>Solution: This message happens when running the very first node in the network, who will produce the genesis block. Make sure the EOS_PUB_DEV_KEY in signature-provider in genesis_start.sh is the same as the EOS_PUB_DEV_KEY in genesis.json. And EOS_PRIV_DEV_KEY is the private key of this public key. For those two files. genesis_start.sh is a file contain the information for the genesis block. genesis_start.sh is a file to start the very first node in the network. For more details, see <a href="../../13/EOSIO_local_network/#Build-local-test-network">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Cryptocurrency Application </category>
          
          <category> EOSIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eos </tag>
            
            <tag> eosio.contracts </tag>
            
            <tag> eos.cdt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Notes</title>
      <link href="/2019/Hexo-Notes/"/>
      <url>/2019/Hexo-Notes/</url>
      
        <content type="html"><![CDATA[<h3 id="Some-notes-for-Hexo"><a href="#Some-notes-for-Hexo" class="headerlink" title="Some notes for Hexo"></a>Some notes for Hexo</h3><p>HEXO is always case sensitive whiling redirecting pages and setting up file properties(yaml).</p><p>Hexo is not good for converting table to html format. The solution is to use html format table directly. </p>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Common error while building EOSIO</title>
      <link href="/2019/common-build-eosio/"/>
      <url>/2019/common-build-eosio/</url>
      
        <content type="html"><![CDATA[<h3 id="Common-error-and-solution-during-compiling-EOSIO-components"><a href="#Common-error-and-solution-during-compiling-EOSIO-components" class="headerlink" title="Common error and solution during compiling EOSIO components:"></a>Common error and solution during compiling EOSIO components:</h3><blockquote><p>Doesn’t have boost or boost library is lower than required.</p></blockquote><p>Solution: It seems the latest version of boost is not in the ubuntu package management right now. I compiled and installed it from source to solve this issue. I installed version 1.67. But the minimum version it requires is 1.57 (I remember).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -O boost_1_67_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.67.0/boost_1_67_0.tar.gz/download</span><br><span class="line">tar xzvf boost_1_67_0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> boost_1_67_0/</span><br></pre></td></tr></table></figure><a id="more"></a><p>Then, get the required libraries and setup. The one required at here is icu for boost::regex. But I installed all of them in case they will be needed in some other places. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential g++ python-dev autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev</span><br><span class="line">./bootstrap.sh --prefix=/usr/</span><br></pre></td></tr></table></figure><p>Then, build it and install it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./b2 <span class="comment"># Build it</span></span><br><span class="line">sudo ./b2 install <span class="comment"># install it</span></span><br></pre></td></tr></table></figure><blockquote><p>Add the installation prefix of “eosio” to CMAKE_PREFIX_PATH or set<br>  “eosio_DIR” to a directory containing one of the above files.  If “eosio”<br>  provides a separate development package or SDK, be sure it has been<br>  installed.</p></blockquote><p>Solution: Error happens while compiling EOSIO.contracts.</p><ol><li><p>Be sure EOS is compiled and installed from source instead of ubuntu package.</p></li><li><p>If the EOS is compiled and installed from source. You could find the place for this Cmake file easily. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> EOS_BUILD_PATH <span class="comment"># EOS_BUILD_PATH is the directory EOS was cloned to.</span></span><br><span class="line">find . -name <span class="string">"eosio-config.cmake"</span></span><br><span class="line"><span class="built_in">export</span> eosio_DIR=<span class="string">"PATH_FOUND"</span> <span class="comment"># PATH_FOUND is the path found up by the previous command</span></span><br></pre></td></tr></table></figure><p>The path is usually at  <code>EOS_BUILD_PATH/build/lib/cmake/eosio/</code>. And it is good to use absolute directory. </p><p>And then, do <code>./build.sh</code> again.</p></li></ol><blockquote><p>Doesn’t have llvm or doesn’t have required version of llvm while building eosio.cdt. </p></blockquote><p>Solution: llvm package is from another repository. So, add <code>--recursive</code> while git clone.</p><blockquote><p>Did install EOS by using the default installing shell but can not start the program by simply run nodeos from terminal.  </p></blockquote><p>Solution: I find this happens on ubuntu 18.04. Use the absolute path to start server instead. Usually, the nodeos program is at <code>EOSIO_BUILD_PATH/build/bin/nodeos</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Cryptocurrency Application </category>
          
          <category> EOSIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eos </tag>
            
            <tag> eosio.contracts </tag>
            
            <tag> eos.cdt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build EOSIO local network</title>
      <link href="/2019/EOSIO_local_network/"/>
      <url>/2019/EOSIO_local_network/</url>
      
        <content type="html"><![CDATA[<h3 id="Some-experience-on-building-EOSIO-local-network"><a href="#Some-experience-on-building-EOSIO-local-network" class="headerlink" title="Some experience on building EOSIO local network"></a>Some experience on building EOSIO local network</h3><h4 id="Basic-info"><a href="#Basic-info" class="headerlink" title="Basic info"></a>Basic info</h4><p>EOSIO is an application based on proof of stake. I am going to discuss my experience on setting up the local test environment for EOSIO. The test version for EOS is 1.7 and test environment is Ubuntu 18.04.<br>The whole system is made up of three components in order to build local environment:</p><ul><li><p><strong>EOS</strong> - Main net. Basic communication </p></li><li><p><strong>EOS.CDT</strong> - Developer package. API for application</p></li><li><p><strong>EOS.CONTRACT</strong> - super user account setup. It store information about different user and send call to system, like create an voter account.</p></li></ul><p>Following is the basic network structure of EOSIO</p><a id="more"></a><ul><li><p>Only one <strong>super account</strong>. It produces blocks based on gensis.json. It can also interact with system to create accounts, register producers.</p></li><li><p>Multiple(21) <strong>block generators</strong>. They will produce(confirm) block once get enough vote</p></li><li><p><strong>Voter</strong>. It could vote producer.</p></li></ul><p>gensis.json is a json file contains the information for the system to produce gensis block. Its structure is as follows:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"initial_timestamp"</span>: <span class="string">"2018-12-05T08:55:11.000"</span>, </span><br><span class="line">  "initial_key": "EOS_PUB_DEV_KEY", 'Only the super account who has the private key relate to this key can produce block'</span><br><span class="line">  "initial_configuration": &#123;</span><br><span class="line">    ... </span><br><span class="line">    "target_block_cpu_usage_pct": 500, 'It doesn't like bitcoind, you could set up everything of the genesis block by yourself.'</span><br><span class="line">    "max_transaction_cpu_usage": 50000,</span><br><span class="line">    "min_transaction_cpu_usage": 100,</span><br><span class="line">    "max_transaction_lifetime": 3600,</span><br><span class="line">    "deferred_trx_expiration_window": 600,</span><br><span class="line">    "max_transaction_delay": 3888000,</span><br><span class="line">    "max_inline_action_size": 4096,</span><br><span class="line">    "max_inline_action_depth": 4,</span><br><span class="line">    "max_authority_depth": 6</span><br><span class="line">  &#125;,</span><br><span class="line">  "initial_chain_id": "0000000000000000000000000000000000000000000000000000000000000000"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For most things in the file is easy to understand. The server is clever, for the string in the json, the server will choose characters he thought it is correct. Confound server thought will be ignored.</p><h5 id="Build-amp-install"><a href="#Build-amp-install" class="headerlink" title="Build &amp; install"></a>Build &amp; install</h5><p>In order to setup a local test environment, EOS.CDT and EOS.CONTRACT have to be compiled on the local machine. Official said EOS is not required to compile locally. But during my test and some hint from <a href="https://github.com/EOSIO/eosio.contracts" target="_blank" rel="noopener">EOS.CONTRACT</a>. It seems it is required. Original official words as follows:</p><blockquote><ol><li><p>First, ensure that your eosio is compiled to the core symbol for the EOSIO blockchain that intend to deploy to.</p></li><li><p>Second, make sure that you have sudo make installed eosio.</p></li><li><p>Then just run the <code>build.sh</code> in the top directory to build all the contracts and the unit tests for these contracts. </p></li></ol></blockquote><blockquote><p>Before compile and run those stuff, make sure the computer has at least 40GB in your home directory and 8GB of memory.  </p></blockquote><p><em>To compile EOS locally, do the following:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/EOSIO/eos --recursive</span><br><span class="line"><span class="built_in">cd</span> eos/</span><br><span class="line">./scripts/eosio_build.sh</span><br></pre></td></tr></table></figure><p>It is also required to install this one into root. The build script is at scripts directory right now. And it may take up to 3 hours to build. It could be faster if you are using a multi-core computer.  </p><p>It is also recommended to install it. So that it will be easier to use in the future. Just do <code>./scripts/eosio_install.sh</code>. During my test on ubuntu 18.04. The script installed successfully. But I can not run it in the shell. </p><p><em>Then build <a href="https://github.com/EOSIO/eosio.cdt" target="_blank" rel="noopener">eosio.cdt</a>.</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/eosio/eosio.cdt</span><br><span class="line"><span class="built_in">cd</span> eosio.cdt</span><br><span class="line">./build.sh</span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure><p>There should exist at least 10GB to compile this one.</p><p><em>Then build <a href="https://github.com/EOSIO/eosio.contracts" target="_blank" rel="noopener">eosio.contracts</a>.</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/EOSIO/eosio.contracts.git</span><br><span class="line">cd eosio.contracts/</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>The building process of eosio.cdt and eosio.contracts is nothing special but time consuming. It might take up to 2 hours to build. And it is impossible to build using multiple cores.</p><p>Some common error and solutions could be found at <a href="../../15/common-build-eosio/">here</a>.</p><h5 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h5><p>You need to have an wallet in order to get start. You will have one by doing the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet create --to-console</span><br></pre></td></tr></table></figure><blockquote><p>There is no way to recover password, do remember it.</p></blockquote><p>When you have the password, you could play with cleos. You could use the following command to see full list of subcommand. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>Some useful subcommands are open, unlock, create_key, private_keys. Whenever you want to visit sensitive data, you need to provide the password. To prevent prompted by system, you could use –password to pass in your password.</p><p>Typically, you need to open wallet at first and then unlock to interact with wallet. After all interactions, it is good to lock them.</p><p><em>Batch initialize</em></p><p>The following are scripts might be helpful to initialize for the appropriate data folder and public key-private key pair for multiple(21) nodes.</p><p>To use it, you have to pass in the password as the first attribute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet open</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">DATADIR=<span class="string">"./blockchain"</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$DATADIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir <span class="variable">$DATADIR</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 21 `</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">DATADIR=<span class="string">"./blockchain"</span><span class="variable">$i</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$DATADIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir <span class="variable">$DATADIR</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cleos wallet unlock  --password <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 21)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">cleos wallet create_key</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cleos wallet private_keys  --password <span class="variable">$1</span>|grep <span class="string">"\""</span>&gt;list</span><br><span class="line"></span><br><span class="line">python3 a.py <span class="comment">#a.py will be discussed below</span></span><br><span class="line">cleos wallet lock</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>a.py is a python script which will export public-key and private key information into file in case it need to be used in the future. It is always required to have both information of public key and private key when starting a node. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">"list"</span>, <span class="string">"r"</span>) </span><br><span class="line">file1 = open(<span class="string">"li_"</span>, <span class="string">"w"</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file: </span><br><span class="line">li.append(line.replace(<span class="string">'\"'</span>, <span class="string">''</span>).replace(<span class="string">','</span>,<span class="string">''</span>).replace(<span class="string">' '</span>,<span class="string">''</span>))</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">file1.write(li[i])</span><br><span class="line">file.close()</span><br><span class="line">file1.close()</span><br></pre></td></tr></table></figure><blockquote><p>The key start with EOS and longer is <strong>public key</strong>, like EOS5CZwEpiweHHZpEdHYsU9Q1MEk5zTtqfrcg3TefBzTYG9xdw2gC</p><p>The key which is shorter is <strong>private key</strong>, like this: 5Jarc4qfsXqHcivfGc8qWYTGdQJ5CPy8NeyRjfceXopn9dy3hgR</p></blockquote><p><em>Batch clean</em></p><p>Those are some script that will remove everything. It will make the workspace(including wallet, work folder) be initialized.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DATADIR=<span class="string">"./blockchain"</span></span><br><span class="line">rm -rf <span class="variable">$DATADIR</span>*;</span><br><span class="line"></span><br><span class="line">cleos wallet open</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">cleos wallet unlock --password <span class="variable">$1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> a; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> a;</span><br><span class="line">cleos wallet remove_key <span class="variable">$a</span> --password <span class="variable">$1</span></span><br><span class="line"><span class="keyword">done</span> &lt; li_</span><br><span class="line">rm li_</span><br><span class="line">rm list</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">cleos wallet lock</span><br></pre></td></tr></table></figure><blockquote><p>It is good to clean every time after experiment, otherwise blocks generated will occupy too many space. It is 0.5s/blocks.</p></blockquote><h4 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h4>  <img alt="Basic procedure" src="https://f5q9jg.bn.files.1drv.com/y4mliL3MZo-_SK5igtd3BDqFS-YkT3YaOVmd-cUxFcdCJDQD0PMnvcbKsLs2SeJutQ9ho3B-tSWCjC_pRp3sAWLpUEFQ9X2_h7DL7Xp0N-NwGtkN1WAl_A7Hz83cpZA4EU4EqURUq9j3petzuFUL3vBssnsJuFLAKFsVaDZ34ymT1rcIMmphV2flpeIvGO7SZZsOCWXxtzZVPi4meg5XPGC5A?width=1280&height=720&cropmode=none" width="100%"> <p>This is the basic procedure. The voter account and block generator account are produced by one super account. Generally speaking, the basic idea is voter will vote the producer they like, block producer are connected together. During the runtime, the procedure is:</p><ul><li><p>Firstly, start producer nodes.</p></li><li><p>Next vote</p></li><li><p>When the block producer has enough votes, block producer will go to confirm blocks.</p></li></ul><p>After doing appropriate settings it should start to confirm blocks. I did’t test this part yet.</p><p>If you want or in some situation, you could link super account together like this, but only the one with appropriate public and private key could generate the block. More specifically, only the one has the private key of the public key in the gensis.json can produce block. Other super accounts nodes could only sync. </p><p>The whole structure like this:</p><img alt="Linked structure" src="https://fzq9jg.bn.files.1drv.com/y4mPFY4a8LfbnWohwk35HzA1vDHDQ-CjNYKvRaKxmvLyM40oaDZz6BuFXy6YlJcXsKQ2De1XGM0jRVjCprRnvAs9pD87cLG359wt-xDj-0FpR0TLY_zYwcO1IWDGJKiKQrwiWouefpY1KG5wjiHAUvCNmT1a13oBQedYAB82QLgwRfBw9TB35FMMrx0MCIgJPB2EZVFiBjwt4LeKLQH-g1Viw?width=1280&height=291&cropmode=none" width="100%"><p>You could use the following command to start multiple super account nodes from gensis status and form the structure shown above:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">password = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">print(<span class="string">"Please include password"</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Generate gensis.json</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">file1 = open(<span class="string">"li_"</span>, <span class="string">"r"</span>)</span><br><span class="line">temp = file1.readline()</span><br><span class="line">initial_key = file1.readline()</span><br><span class="line">os.system(<span class="string">'rm -f genesis.json'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"genesis.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">    json.dump(&#123;<span class="string">'initial_timestamp'</span>:<span class="string">"2018-12-05T08:55:11.000"</span>, <span class="string">'initial_key'</span>: initial_key[:<span class="number">-1</span>], <span class="string">'initial_configuration'</span>:&#123;<span class="string">"max_block_net_usage"</span>: <span class="number">1048576</span>, <span class="string">"target_block_net_usage_pct"</span>: <span class="number">1000</span>, <span class="string">"max_transaction_net_usage"</span>: <span class="number">524288</span>, <span class="string">"base_per_transaction_net_usage"</span>: <span class="number">12</span>, <span class="string">"net_usage_leeway"</span>: <span class="number">500</span>, <span class="string">"context_free_discount_net_usage_num"</span>: <span class="number">20</span>, <span class="string">"context_free_discount_net_usage_den"</span>: <span class="number">100</span>, <span class="string">"max_block_cpu_usage"</span>: <span class="number">100000</span>, <span class="string">"target_block_cpu_usage_pct"</span>: <span class="number">500</span>, <span class="string">"max_transaction_cpu_usage"</span>: <span class="number">50000</span>, <span class="string">"min_transaction_cpu_usage"</span>: <span class="number">100</span>, <span class="string">"max_transaction_lifetime"</span>: <span class="number">3600</span>, <span class="string">"deferred_trx_expiration_window"</span>: <span class="number">600</span>, <span class="string">"max_transaction_delay"</span>: <span class="number">3888000</span>, <span class="string">"max_inline_action_size"</span>: <span class="number">4096</span>, <span class="string">"max_inline_action_depth"</span>: <span class="number">4</span>, <span class="string">"max_authority_depth"</span>: <span class="number">6</span> &#125;,  <span class="string">"initial_chain_id"</span>: <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span>&#125;, outfile, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Start gensis</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">ini_port=<span class="number">9000</span></span><br><span class="line">currentport=ini_port</span><br><span class="line">sentstring=<span class="string">'./genesis_start.sh '</span>+<span class="string">'./blockchain'</span>+<span class="string">' '</span>+initial_key[:<span class="number">-1</span>]+<span class="string">' '</span>+temp[:<span class="number">-1</span>]+<span class="string">' '</span>+str(currentport)+<span class="string">' '</span>+str(currentport+<span class="number">100</span>)+<span class="string">' '</span>+str(currentport+<span class="number">101</span>)</span><br><span class="line">os.system(<span class="string">'echo Start gensis'</span>)</span><br><span class="line">os.system(sentstring)</span><br><span class="line">currentport+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">30</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">start nodes</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">22</span>):</span><br><span class="line">private_key = file1.readline()</span><br><span class="line">public_key = file1.readline()</span><br><span class="line">tosend = <span class="string">'./genesis_start.sh '</span>+<span class="string">'./blockchain'</span>+str(i)+<span class="string">' '</span>+public_key[:<span class="number">-1</span>]+<span class="string">' '</span>+private_key[:<span class="number">-1</span>]+<span class="string">' '</span>+str(currentport)+<span class="string">' '</span>+str(currentport+<span class="number">100</span>)+<span class="string">' '</span>+str(currentport+<span class="number">99</span>)</span><br><span class="line">os.system(<span class="string">'echo start node '</span>+ str(i))</span><br><span class="line">os.system(tosend)</span><br><span class="line">currentport+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>For this python code, it first generates the gensis.json. And then it starts nodes in some order(First gensis node, then other super accounts). All public key and private key used is based on the file generated previously. To use it, you have to put the password of the wallet as the first attribute pass in when you run the program. The script did so, in case it needs to deal with sensitive information.</p><p>The follow script is in a file called genesis_start.sh, which is called by the previous python program to start each node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#$1--datadir $2--Public_key $3--Private_key $4--httpserver $5--p2plisten $6--peer_address</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> ] &amp;&amp; [ <span class="variable">$2</span> ] &amp;&amp; [ <span class="variable">$3</span> ] &amp;&amp; [ <span class="variable">$4</span> ] &amp;&amp; [ <span class="variable">$5</span> ] &amp;&amp; [ <span class="variable">$6</span> ]; <span class="keyword">then</span></span><br><span class="line">DATADIR=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">nodeos \</span><br><span class="line">--genesis-json <span class="variable">$DATADIR</span><span class="string">"/../genesis.json"</span> \</span><br><span class="line">--signature-provider <span class="variable">$2</span>=KEY:<span class="variable">$3</span> \</span><br><span class="line">--plugin eosio::producer_plugin \</span><br><span class="line">--plugin eosio::chain_api_plugin \</span><br><span class="line">--plugin eosio::http_plugin \</span><br><span class="line">--plugin eosio::history_api_plugin \</span><br><span class="line">--data-dir <span class="variable">$DATADIR</span><span class="string">"/data"</span> \</span><br><span class="line">--blocks-dir <span class="variable">$DATADIR</span><span class="string">"/blocks"</span> \</span><br><span class="line">--config-dir <span class="variable">$DATADIR</span><span class="string">"/config"</span> \</span><br><span class="line">--producer-name eosio \</span><br><span class="line">--http-server-address 127.0.0.1:<span class="variable">$4</span> \</span><br><span class="line">--p2p-listen-endpoint 127.0.0.1:<span class="variable">$5</span> \</span><br><span class="line">--access-control-allow-origin=* \</span><br><span class="line">--contracts-console \</span><br><span class="line">--http-validate-host=<span class="literal">false</span> \</span><br><span class="line">--verbose-http-errors \</span><br><span class="line">--<span class="built_in">enable</span>-stale-production \</span><br><span class="line">--p2p-peer-address localhost:<span class="variable">$6</span> \</span><br><span class="line">&gt;&gt; <span class="variable">$DATADIR</span><span class="string">"/nodeos.log"</span> 2&gt;&amp;1 &amp; \</span><br><span class="line"><span class="built_in">echo</span> $! &gt; <span class="variable">$DATADIR</span><span class="string">"/eosd.pid"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>This script will start a new node by using information given by user and save the running result to file at the datadir given.. To use it manually, just use <code>./genesis_start.sh [datadir] [Public_key] [Private_key] [httpserver] [p2plisten] [peer_address]</code></p><blockquote><p>If you get an information of “This is not an executable file”. Just do <code>chmod 777 genesis_start.sh</code></p></blockquote><p>I think those scripts are still useful for the following reason:</p><ul><li>The producer has option about the super account node it reports. It could make the main node not too stressful when lots of submission happens(I guess). </li><li>By modifying them a little bit, they could also be used to generate multiple block producer and voters.</li></ul><p>And I find out only the linked structure will be accepted. It means multiple connections to one super account node is not permitted. More detailed, as the graph show below:<br>      <img alt="Multi conn not allowed" src="https://fzq8jg.bn.files.1drv.com/y4m9X87KWyMymAB7T60SBAoK0DvuSQsPDRoSqIYl1A-6crJca50nXk36T0G2crGK2PISAJLGzaM5Z-XAVcpQTMwARR8VuQpZlZwz5w7WTmuVQWaD8hEHEt2bmFVH0HJpP_gl5fWdfIaXHw-ZIE8RHQU2slcf3fPLgmnQGZMLvIX8TDnPBUVWLe-JCKBzQtCSqRasTyWT2AmMOPsiUweCl-C9A?width=1280&height=519&cropmode=none" width="100%"></p><blockquote><p>To make the system recognize an account is block producer, it is required to use regproducer like the following. Otherwise it is just a voter.</p></blockquote><h4 id="Build-local-test-network"><a href="#Build-local-test-network" class="headerlink" title="Build local test network"></a>Build local test network</h4><blockquote><p>Need to use the EOS (cleos and nodes) compiled from the previous steps. Maybe this is not required. But it seems that eosio.contract is related on eosio main program. The network can not be built when using the software from ubuntu package management on my machine. </p></blockquote><p>Basically, I follow up the guidance from <a href="https://medium.com/coinmonks/guide-to-eos-voting-simulation-4eb7a85bab44" target="_blank" rel="noopener">Guide to EOS voting simulation</a> and the official guidance <a href="https://developers.eos.io/eosio-nodeos/docs/bios-boot-sequence" target="_blank" rel="noopener">BIOS Boot Sequence</a>. Some places has been changed to fit the latest version of EOSIO.</p><p>Before start, you need to initialize wallet by taking the previous steps. And then create some new public and private key pairs. Just do <code>cleos wallet create_key</code>. If you want to see all key pairs, do <code>cleos wallet private_keys</code>. </p><p>Then, create genesis.json and the script used to start producing genesis block. </p><ul><li>Create genesis.json at a property directory. </li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"initial_timestamp"</span>: <span class="string">"2018-12-05T08:55:11.000"</span>,</span><br><span class="line">  <span class="attr">"initial_key"</span>: <span class="string">"EOS_PUB_DEV_KEY"</span>,</span><br><span class="line">  <span class="attr">"initial_configuration"</span>: &#123;</span><br><span class="line">    <span class="attr">"max_block_net_usage"</span>: <span class="number">1048576</span>,</span><br><span class="line">    <span class="attr">"target_block_net_usage_pct"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"max_transaction_net_usage"</span>: <span class="number">524288</span>,</span><br><span class="line">    <span class="attr">"base_per_transaction_net_usage"</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">"net_usage_leeway"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"context_free_discount_net_usage_num"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">"context_free_discount_net_usage_den"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"max_block_cpu_usage"</span>: <span class="number">100000</span>,</span><br><span class="line">    <span class="attr">"target_block_cpu_usage_pct"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"max_transaction_cpu_usage"</span>: <span class="number">50000</span>,</span><br><span class="line">    <span class="attr">"min_transaction_cpu_usage"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"max_transaction_lifetime"</span>: <span class="number">3600</span>,</span><br><span class="line">    <span class="attr">"deferred_trx_expiration_window"</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">"max_transaction_delay"</span>: <span class="number">3888000</span>,</span><br><span class="line">    <span class="attr">"max_inline_action_size"</span>: <span class="number">4096</span>,</span><br><span class="line">    <span class="attr">"max_inline_action_depth"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"max_authority_depth"</span>: <span class="number">6</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"initial_chain_id"</span>: <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Then, create the script used to start the first node and save it as genesis_start.sh. </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATADIR=<span class="string">"./blockchain"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$DATADIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir -p <span class="variable">$DATADIR</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">nodeos \</span><br><span class="line">--genesis-json <span class="variable">$DATADIR</span><span class="string">"/../genesis.json"</span> \</span><br><span class="line">--signature-provider EOS_PUB_DEV_KEY=KEY:EOS_PRIV_DEV_KEY \</span><br><span class="line">--plugin eosio::producer_plugin \</span><br><span class="line">--plugin eosio::chain_api_plugin \</span><br><span class="line">--plugin eosio::http_plugin \</span><br><span class="line">--plugin eosio::history_api_plugin \</span><br><span class="line">--plugin eosio::history_plugin \</span><br><span class="line">--data-dir <span class="variable">$DATADIR</span><span class="string">"/data"</span> \</span><br><span class="line">--blocks-dir <span class="variable">$DATADIR</span><span class="string">"/blocks"</span> \</span><br><span class="line">--config-dir <span class="variable">$DATADIR</span><span class="string">"/config"</span> \</span><br><span class="line">--producer-name eosio \</span><br><span class="line">--http-server-address 127.0.0.1:8888 \</span><br><span class="line">--p2p-listen-endpoint 127.0.0.1:9010 \</span><br><span class="line">--access-control-allow-origin=* \</span><br><span class="line">--contracts-console \</span><br><span class="line">--http-validate-host=<span class="literal">false</span> \</span><br><span class="line">--verbose-http-errors \</span><br><span class="line">--<span class="built_in">enable</span>-stale-production \</span><br><span class="line">--p2p-peer-address localhost:9011 \</span><br><span class="line">--p2p-peer-address localhost:9012 \</span><br><span class="line">--p2p-peer-address localhost:9013 \</span><br><span class="line">&gt;&gt; <span class="variable">$DATADIR</span><span class="string">"/nodeos.log"</span> 2&gt;&amp;1 &amp; \</span><br><span class="line"><span class="built_in">echo</span> $! &gt; <span class="variable">$DATADIR</span><span class="string">"/eosd.pid"</span></span><br></pre></td></tr></table></figure><blockquote><p>Note: The EOS_PUB_DEV_KEY in signature-provider in genesis_start.sh should be the same as the EOS_PUB_DEV_KEY in genesis.json. EOS_PRIV_DEV_KEY is the private key of this public key. Otherwise, you will get the error Not producing block because I don’t have the private key for EOS_PUB_DEV_KEY</p></blockquote><ol><li><strong>Start the first node</strong></li></ol><p>This tutorial is based on v4.2.0, with one node for bios and two nodes as block producers. First start the bios node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gensis_start.sh</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Deploy</strong> <code>eosio.bios</code> <strong>contract to</strong> <code>eosio</code> <strong>account.</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos <span class="built_in">set</span> contract eosio build/contracts/eosio.bios</span><br></pre></td></tr></table></figure><div id="3"></div><ol start="3"><li><strong>Create necessary accounts.</strong></li></ol><p>The list of accounts required is provided by official:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; eosio.bpay</span><br><span class="line">&gt; eosio.msig</span><br><span class="line">&gt; eosio.names</span><br><span class="line">&gt; eosio.ram</span><br><span class="line">&gt; eosio.ramfee</span><br><span class="line">&gt; eosio.saving</span><br><span class="line">&gt; eosio.stake</span><br><span class="line">&gt; eosio.token</span><br><span class="line">&gt; eosio.vpay</span><br><span class="line">&gt; eosio.rex</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>Use <code>create account</code> command to create each of them:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos create account eosio eosio.*** EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>Set the</strong> <code>eosio.token</code> <strong>contract</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos <span class="built_in">set</span> contract eosio.token eos/build/contracts/eosio.token</span><br></pre></td></tr></table></figure><blockquote><p>The eosio.token used should be at the build directory which contains file eosio.token.wasm, otherwise wrong message will be invoked.</p></blockquote><ol start="5"><li><strong>set the</strong> <code>eosio.msig</code> <strong>contract</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cleos create account eosio eosio.msig EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo</span><br><span class="line">cleos <span class="built_in">set</span> contract eosio.msig eos/build/contracts/eosio.msig</span><br></pre></td></tr></table></figure><blockquote><p>The eosio.msig used should be at the build directory which contains file eosio.msig.wasm, otherwise wrong message will be invoked.</p></blockquote><ol start="6"><li><strong>Create and allocate token</strong></li></ol><p>We create and issue 1,000,000,000.0000 tokens and name it ‘SYS’. Then issue to <code>eosio</code> account.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cleos push action eosio.token create <span class="string">'&#123;"issuer":"eosio", "maximum_supply": "1000000000.0000 SYS", "can_freeze": 0, "can_recall": 0, "can_whitelist": 0&#125;'</span> -p eosio.token</span><br><span class="line">cleos push action eosio.token issue <span class="string">'&#123;"to":"eosio","quantity":"1000000000.0000 SYS","memo":"issue"&#125;'</span> -p eosio</span><br></pre></td></tr></table></figure><p>To check the balance and stats</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cleos get currency balance eosio.token eosio</span><br><span class="line">cleos get currency stats eosio.token <span class="string">'SYS'</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>Set</strong> <code>eosio.system</code> <strong>contract to</strong> <code>eosio</code></li></ol><p>After setting <code>eosio.system</code> contract we will be able to stake our accounts.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos <span class="built_in">set</span> contract eosio eos/build/contracts/eosio.system</span><br></pre></td></tr></table></figure><p>Then stake tokens and expand the network. <code>cleos</code> stakes 8 KB of RAM on account creation, paid by the account creator.</p><ol start="8"><li><strong>Make</strong> <code>eosio.msig</code> <strong>a privileged account and Initialize system account</strong> </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cleos push action eosio setpriv <span class="string">'["eosio.msig", 1]'</span> -p eosio@active</span><br><span class="line"></span><br><span class="line">cleos push action eosio init <span class="string">'["0", "4,SYS"]'</span> -p eosio@active</span><br></pre></td></tr></table></figure><blockquote><p>The command initializes the <code>system</code> account with code zero (needed at initialization time)  and <code>SYS</code> token with precision 4; precision can range from [0 .. 18]. </p></blockquote><ol start="9"><li><strong>Create accounts for BPs:</strong> <code>bp1111111111</code> <strong>and</strong> <code>bp2222222222</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos system newaccount eosio bp1111111111 EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo --buy-ram-EOS <span class="string">'1000000.0000 SYS'</span> --stake-net <span class="string">'1000000.0000 SYS'</span> --stake-cpu <span class="string">'1000000.0000 SYS'</span></span><br></pre></td></tr></table></figure><ol start="10"><li><strong>Register BPs</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos system regproducer bp1111111111 EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo</span><br></pre></td></tr></table></figure><p>Similarly register <code>bp2222222222</code>. To check producers:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos system listproducers</span><br></pre></td></tr></table></figure><p>To start the two producer nodes:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeos -e --genesis-json path/to/genesis.json --producer-name bp1111111111 --private-key <span class="string">'[ "EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo","5K7EY...Hi8Uy61wU1o" ]'</span> --http-server-address 127.0.0.1:8889 --p2plisten-endpoint 127.0.0.1:9877 --p2p-peer-address bios_node_ip:port --plugin eosio::producer_plugin --plugin eosio::chain_api_plugin --plugin eosio::net_api_plugin</span><br></pre></td></tr></table></figure><ol start="11"><li><strong>Create voters accounts:</strong> <code>voter1111111</code><strong>,</strong> <code>voter2222222</code><strong>,</strong> <code>voter3333333</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos system newaccount eosio voter1111111 EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo EOS6sAgFvNDfiZ62UMosK7WULNVCuAotpR2raKzaBpopLevvYYWBo --buy-ram-EOS <span class="string">'50.0000 SYS'</span> --stake-net <span class="string">'50.0000 SYS'</span> --stake-cpu <span class="string">'50.0000 SYS'</span></span><br></pre></td></tr></table></figure><ol start="12"><li><strong>Issue tokens to voters</strong></li></ol><p>Transfer 100,000,000 SYS to each voter.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos push action eosio.token transfer <span class="string">'["eosio", "voter1111111","100000000.0000 SYS","vote"]'</span> -p eosio</span><br></pre></td></tr></table></figure><p>Check the balance</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos get currency balance eosio.token voter1111111</span><br></pre></td></tr></table></figure><ol start="13"><li><strong>Delegate bandwidth</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos system delegatebw voter1111111 voter1111111 <span class="string">"50000000.0000 SYS"</span> <span class="string">"50000000.0000 SYS"</span></span><br></pre></td></tr></table></figure><blockquote><p>Sometime, the program will tell you failed. But the command successes actually. You could redo <code>cleos get currency balance eosio.token voter1111111</code> to check if this command take effect or not.</p></blockquote><ol start="14"><li><strong>Vote</strong></li></ol><p>Voting for producers can begin as accounts are staked and producers are registered.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos system voteproducer prods voter1111111 bp1111111111 bp2222222222</span><br></pre></td></tr></table></figure><p>After 15% of the available votes have been voted, block producers will begin producing. In this case we need 150,000,000 votes.</p><ul><li><strong>Check votes:</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cleos system listproducers </span><br><span class="line">cleos get table eosio eosio voters</span><br></pre></td></tr></table></figure><p>Some error and solutions I found is at <a href="../../15/common-run-eosio/">here</a>. </p><h4 id="Special-notice"><a href="#Special-notice" class="headerlink" title="Special notice"></a>Special notice</h4><ul><li>EOS.CONTRACT is based on locally compiled EOS. </li><li>To compile EOS locally, it has to use git clone to clone it from github. You can not download from source and compile.</li><li>The compilation requires lots of space. It is good to remain 40GB of disk and 8GB of memory. It also takes around 3 hours to compile.</li><li>They can only be compiled at the current user’s home directory. </li></ul>]]></content>
      
      
      <categories>
          
          <category> Cryptocurrency Application </category>
          
          <category> EOSIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eos </tag>
            
            <tag> eosio.contracts </tag>
            
            <tag> eos.cdt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Bitcoin local network</title>
      <link href="/2019/Bitcoin_local_network/"/>
      <url>/2019/Bitcoin_local_network/</url>
      
        <content type="html"><![CDATA[<h3 id="Some-experience-on-building-Bitcoin-local-network"><a href="#Some-experience-on-building-Bitcoin-local-network" class="headerlink" title="Some experience on building Bitcoin local network"></a>Some experience on building Bitcoin local network</h3><h4 id="Basic-info"><a href="#Basic-info" class="headerlink" title="Basic info"></a>Basic info</h4><p>Bitcoin is an client based on proof of work(POW). </p><p>Bitcoin core is a client of official bitcoin network. After some tests, I find the local network for bitcoin is good for testing wallet application but hard for testing mining function.  In this page, I am going to discuss some experience of mine on building the local test environment for bitcoin core. </p><h5 id="Compile-amp-Installation"><a href="#Compile-amp-Installation" class="headerlink" title="Compile &amp; Installation"></a>Compile &amp; Installation</h5><a id="more"></a><p>For ubuntu, just do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev libqrencode-dev </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bitcoin/bitcoin.git</span><br><span class="line"><span class="built_in">cd</span> bitcoin</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install <span class="comment"># optional</span></span><br></pre></td></tr></table></figure><p>For other system, official has a page at <a href="https://github.com/bitcoin/bitcoin/tree/master/doc" target="_blank" rel="noopener">here</a> described how to build and install.</p><p>Bitcoin core contains three different networks, mainnet, regtest and testnet. The difference of those three networks are as follows:</p><h5 id="Mainnet"><a href="#Mainnet" class="headerlink" title="Mainnet"></a>Mainnet</h5><blockquote><p>The original and <strong>main network</strong> for Bitcoin transactions, where satoshis have <strong>real economic value.</strong>     </p></blockquote><p>  As we could see above, mainnet is the main network of bitcoin core. It has the <strong>real economic value</strong>, which means it has lots of restriction. And it make me hard to implement it locally. On the main net, I tried lots of different ways, including connect it with a virtual network, do not connect with network and change some source code. But none of them successfully build a local network. </p><p><em>To start a node under main net, just do: (The default port is 8444/8443)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind</span><br></pre></td></tr></table></figure><p><em>To use rpc to communicate, do the following: (datadir should exist at first)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/A/ -pid=<span class="variable">$HOME</span>/A/.pid -debug -daemon <span class="comment">#-daemon for running in background -debug to get detailed output</span></span><br></pre></td></tr></table></figure><p>In some old version, password and username can not be the same.</p><p><em>To connect to a specific node, use -connect tag.</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -connect=127.0.0.1:17592 -datadir=<span class="variable">$HOME</span>/A/ -pid=<span class="variable">$HOME</span>/A/.pid -debug -daemon</span><br></pre></td></tr></table></figure><p>-reindex-chainstate(Rebuild chain state from the currently indexed blocks ) and -reindex(Rebuild chain state and block index from the blk*.dat files on disk ) might be helpful some time. If need them, just add them to the end of the startup code</p><p><em>Use the following code to start 5 nodes and connect them together under main net:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/ -connect=127.0.0.1:17592 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17592 -rpcuser=123 -rpcpassword=123 -rpcport=16592 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17593 -rpcuser=123 -rpcpassword=123 -rpcport=16593 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17594 -rpcuser=123 -rpcpassword=123 -rpcport=16594 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17595 -rpcuser=123 -rpcpassword=123 -rpcport=16595 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/.pid -debug</span><br></pre></td></tr></table></figure><p>Those data dir should exist. To check them:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATADIR=<span class="string">"~/test/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A B C D E</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$DATADIR</span><span class="variable">$i</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir -p <span class="variable">$DATADIR</span><span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>If you want to restart a new test or changed the version of bitcoind running on the machine(from high version to low version). You have to delete the datadir: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATADIR=<span class="string">"~/test/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A B C D E</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$DATADIR</span><span class="variable">$i</span> ]; <span class="keyword">then</span></span><br><span class="line">  rm -rf <span class="variable">$DATADIR</span><span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>To get info from any node by using rpc command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoin-cli -rpcport=16591 -rpcuser=123 -rpcpassword=123 RPC_COMMAND</span><br></pre></td></tr></table></figure><p>RPC_COMMAND are commands like getpeerinfo, getblocktemplpate, getmininginfo, or some commands about transaction. The full list is on <a href="https://bitcoincore.org/en/doc/0.17.0/" target="_blank" rel="noopener">Bitcoin Core 0.17.0 RPC</a></p><p><strong>bitcoin-cli</strong> is just a communication tool. So, you could use the same command to communicate with different nodes in different model(mainnet, testnet, regtest). </p><p>Moreover, you could also use it to communicate with other project’s node forked from bitcoind, like litecoind.</p><h5 id="Regtest"><a href="#Regtest" class="headerlink" title="Regtest"></a>Regtest</h5><blockquote><p>A local testing environment in which developers can almost instantly <strong>generate blocks on demand</strong> for testing events, and can create private satoshis with no real-world value.</p></blockquote><p><strong>generate blocks on demand</strong> means it is not real case. It is fake mining. An easy example is it produce block quick and producer doesn’t get award they should have. Another example is the normal case should have nonce 0-0xfffff. But it only have nonce 0-4 for every block. So, it is a good tool to test transaction and wallet application locally.</p><p><em>To start a node under regtest, just do: (The default port is 18444/18443)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -regtest</span><br></pre></td></tr></table></figure><p>The other commands like whatever at the first part of main net. Just add the -regtest tag to the program.</p><p><em>Use the following code to start 5 nodes and connect them together under regtest:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/ -regtest -connect=127.0.0.1:17592 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17592 -rpcuser=123 -rpcpassword=123 -rpcport=16592 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17593 -rpcuser=123 -rpcpassword=123 -rpcport=16593 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17594 -rpcuser=123 -rpcpassword=123 -rpcport=16594 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17595 -rpcuser=123 -rpcpassword=123 -rpcport=16595 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/.pid -debug</span><br></pre></td></tr></table></figure><p>Those data dir should exist. See the former part for the way to do those procedure       </p><p>Though it is possible to use command represented before, the official recommend to use this one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoin-cli -regtest -rpcport=16591 -rpcuser=123 -rpcpassword=123 RPC_COMMAND</span><br></pre></td></tr></table></figure><p>RPC_COMMAND are commands like getpeerinfo, getblocktemplpate, getmininginfo, or some commands about transaction. The full list is on <a href="https://bitcoincore.org/en/doc/0.17.0/" target="_blank" rel="noopener">Bitcoin Core 0.17.0 RPC</a></p><h5 id="Testnet"><a href="#Testnet" class="headerlink" title="Testnet"></a>Testnet</h5><blockquote><p>A global testing environment in which developers can obtain and spend satoshis that have <strong>no real-world value</strong> on a network that is <strong>very similar</strong> to the Bitcoin mainnet.</p></blockquote><p><strong>very similar</strong> means it is likely to be the same as the main net. <strong>no real-world value</strong> means you could get some points free online.    </p><p>By comparing with mainnet, it seems there is restriction on the height on the testnet, which means difficulty has restriction. Right now, it is at the version 3. Its version could be changed by developer, but it is hardcoded. Difficulty does change when the height being higher and higher. And most things are similar to mainnet. It also has the same restrictions as the main net. So, testnet is best for testing transaction application and wallet application.</p><p>To start a node under testnet, just do: (The default port is 18444/18443)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -testnet</span><br></pre></td></tr></table></figure><p>The other commands like whatever at the first part of main net. Just add the -testnet tag to the program.   </p><p>Use the following code to start 5 nodes and connect them together under testnet:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/ -testnet -connect=127.0.0.1:17592 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17592 -rpcuser=123 -rpcpassword=123 -rpcport=16592 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17593 -rpcuser=123 -rpcpassword=123 -rpcport=16593 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17594 -rpcuser=123 -rpcpassword=123 -rpcport=16594 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17595 -rpcuser=123 -rpcpassword=123 -rpcport=16595 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/.pid -debug</span><br></pre></td></tr></table></figure><p>Those data dir should exist. See the former part for the way to do those procedure</p><p>Though it is possible to use command represented before, the official recommend to use this one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoin-cli -testnet -rpcport=16591 -rpcuser=123 -rpcpassword=123 RPC_COMMAND</span><br></pre></td></tr></table></figure><p>RPC_COMMAND are commands like getpeerinfo, getblocktemplpate, getmininginfo, or some commands about transaction. The full list is on <a href="https://bitcoincore.org/en/doc/0.17.0/" target="_blank" rel="noopener">Bitcoin Core 0.17.0 RPC</a></p><h5 id="Version-difference"><a href="#Version-difference" class="headerlink" title="Version difference"></a>Version difference</h5>  <img alt="Version difference" src="https://h59ygg.bn.files.1drv.com/y4mi5rh-SwSuFKvGvOs_EIQFjXefs1P_ViKroareW_mtIrjAE_zF4160tywav8iK4hgNfGuu87DXGP4gD-kvkFTxi-TEMXjXHcxSQaudMBhQf7KfoHV6hv_MWClF6czkxt7jwKQA7AOQbSCR1YwEcVX9ouTRmH6CKA26mAayQXnIK7O04Yt9A1dl0sg4AKKvcZWvg7l9DqK0QSD7f1gzZbGJw?width=1280&height=720&cropmode=none" width="100%"><p>The bubble is the separator of different version. Litecoind is forked out from bitcoind since 0.16.3. The methods talked above, getblocktemplate, is only for mainnet or testnet. For the regtest net, there is only one method, generate or generatetoaddress. <strong>0.17.9</strong> remove wallet functions like listaccounts. It also remove generate function. To confirm a block on regtest, use generatetoaddress instead.</p><h5 id="To-connect-nodes"><a href="#To-connect-nodes" class="headerlink" title="To connect nodes"></a>To connect nodes</h5><img alt="Basic structure" src="https://fpqpjg.bn.files.1drv.com/y4mXqpE6NGGZOHb58ocVVjMxMYZ_UM-D9IWy5CWPwqGXHIxRYk7nQncfdf9We3Cf9nva_kWx6fiKELZzbgUqH1sxr0Mx5Byu_B33dIyiULR7wPMQgOkcrM6_wu_YTadEZxndBs_y5RyS5G2YlE6tpQ9HhZqG_DNxtftVvErHpzPV1ELwiJ0UKya-ie1pfjjKuozoag40X8sMsNgaZY2nbXVgA?width=1280&height=720&cropmode=none" width="100%"><p>This graph is the basic way to connect nodes. The miner is always separate with the main net. Loop connection is permitted but not required. In order to start using mining feature(getblocktemplate). Be sure to have at least two nodes connected. Actually, there are more restriction than this. </p><h4 id="To-confirm-a-block"><a href="#To-confirm-a-block" class="headerlink" title="To confirm a block"></a>To confirm a block</h4>  <img alt="Structure to mine" src="https://fp8bjw.bn.files.1drv.com/y4mdRutIlghFFflWeN_puKMs_4LpZsI8wk9IWOQ3lhXixvxVuoO6OK3VeBB4TNLaFIdGO0NIGJVmFkyZxVoxhpYvoHo3USjmB1n3R3EsLAOaopAUvz5nVWqFp1ojkL-zWeeWDRsff0cVx8HcvXMF21RFXsgw9ez4re7vUudQKVeyELWlfOGycyNM56xibsw9NgcEbO5uwRSgJPXllE_qW_4dg?width=1280&height=720&cropmode=none" width="100%"><p><strong>Bitcoin core full node</strong> is the client start by bitcoind by using command in the previous section.</p><p>Above is the basic structure for mining(confirm a block). If no other things happen, one block will be completely confirmed 100 blocks later. The confirm interval is 100 blocks.</p><p><strong>Getblocktemplate</strong> is a method which will return the following structure as a return result as a json for the miner to use, which contains information miner need. The structure looks like this:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"result"</span>:&#123;</span><br><span class="line">      <span class="attr">"capabilities"</span>:[<span class="string">"proposal"</span>],</span><br><span class="line">      ...</span><br><span class="line">      "previousblockhash":"756c7b16ef069c782fe6faf9e393483821261206fe110d409c11fbc4a0b927b0",</span><br><span class="line">      "transactions":[], 'Transactions information could be used for next block'</span><br><span class="line">      "coinbaseaux":&#123;"flags":""&#125;, 'miner will use this and the nest value to build coinbase'</span><br><span class="line">      "coinbasevalue":5000000000, 'bonus people have'</span><br><span class="line">      "longpollid":"756c7b16ef069c782fe6faf9e393...06fe110d409c11fbc4a0b927b02", 'bitcoind technique'</span><br><span class="line">      "target":"7fffff0000000000000000000000000000000000000000000000000000000000", </span><br><span class="line">      "mintime":1550614864,</span><br><span class="line">      "noncerange":"00000000ffffffff",</span><br><span class="line">  ...</span><br><span class="line">      "bits":"207fffff",</span><br><span class="line">      "height":4,</span><br><span class="line">      ...</span><br><span class="line">   &#125;,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After version <strong>0.17.9</strong>. You have to attach the argument segwit in order to get a return. Their official said this is safer. In order to attach argument, it is recommend to use curl:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user 123 --data-binary <span class="string">'&#123;"id": 1, "method": "getblocktemplate", "params": [&#123;"rules": ["segwit"], "capabilities": ["coinbasetxn", "workid", "coinbase/append"]&#125;]&#125;'</span> -H <span class="string">'content-type: text/plain;'</span> http://127.0.0.1:16592/</span><br></pre></td></tr></table></figure><p><strong>Miners</strong> are softwares used for mining</p><p>If you are using Miner software, then you don’t have to understand what getblocktemplate get. Miner software will handle them. But you have to make sure the Getblocktemplate method is working and coinbasevalue exist and it is not 0.</p><blockquote><p>To make the coinbasevalue exist and it is not 0, it might be helpful to make sure <a href="https://github.com/bitcoin/libblkmaker" target="_blank" rel="noopener">libblkmaker</a>compile successfully. Because there is some library dependence required. And Getblocktemplate never tell you what is the dependence and the main bitcoin core could compile without it. Maybe there are some better ways. But I fix every dependences by compile libblkmaker. I think it is because they use the same dependence at somewhere. But some people also say bitcoin’s getblocktemplate relay on libblkmaker. </p></blockquote><p>There are two official recommend and commonly used miner. <a href="https://bitcointalk.org/?topic=877081" target="_blank" rel="noopener">BFGMiner</a> and <a href="https://bitcointalk.org/?topic=877081" target="_blank" rel="noopener">Cgminer</a>. </p><p><em>To start solo mining by using <strong>BFGMiner</strong>:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bfgminer -o http://127.0.0.1:16592 -u 123 -p 123 --generate-to <span class="string">"PUBLIC_ADDRESS"</span> --coinbase-sig <span class="string">"rig1: This is Joe's block!"</span> --net-delay</span><br></pre></td></tr></table></figure><p>–coinbase-sig is for comments, it is not required</p><p>–net-delay is to make it don’t communicate with server too frequently.</p><p>You could use -S to specify hardware you want to use:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bfgminer -S opencl:auto -o http://127.0.0.1:16592 -u 123 -p 123 --generate-to <span class="string">"PUBLIC_ADDRESS"</span></span><br></pre></td></tr></table></figure><p><em>To start solo mining by using <strong>Cgminer</strong>:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cgminer -o http://localhost:8332 -u username -p password --btc-address PUBLIC_ADDRESS</span><br></pre></td></tr></table></figure><p>This is from the official website, I did’t test it. It requires to use FPGA and ASIC miner.</p><p>If you want to build a miner from scratch, official do provide some instructions at their <a href="https://en.bitcoin.it/wiki/Getblocktemplate#For_developers" target="_blank" rel="noopener">website</a></p><p>Actually, if you just want to build a miner application, most of people choose to make their application based on the <a href="https://github.com/bitcoin/libblkmaker" target="_blank" rel="noopener">libblkmaker</a> official provided.</p><h4 id="Special-note"><a href="#Special-note" class="headerlink" title="Special note"></a>Special note</h4><ol><li>In order to simulate a real network case that lots of transaction happens every second, you could use the following code:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 1000)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  bitcoin-cli -regtest -rpcport=16591 -rpcuser=123 -rpcpassword=123 sendtoaddress <span class="string">"PUBLIC_ADDRESS"</span> 0.0001</span><br><span class="line">  sleep 2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>Build Path should be correct. If you change the path of compiled file, you have to reconfigure and recompile before install or do other implementation.<br>Bitcoind is not friendly for mining locally</p></li><li><p>For mainnet and testnet, they set up some restriction. So getblocktemplate never works. The coding for getblocktemplate is in <a href="https://github.com/bitcoin/bitcoin/blob/adc55dbac5b521d6c9df58d1d69075e6abf0116f/src/rpc/mining.cpp#L292" target="_blank" rel="noopener">mining.cpp</a> Maybe I need to look through source in order to check where is the real restriction. But I guess they setup multiple restrictions. One I found is at <a href="https://github.com/bitcoin/bitcoin/blob/f5a623eb66c81d9d7b11206d574430af0127546d/src/chainparams.cpp" target="_blank" rel="noopener">chainparams.cpp</a>. It is also a direction to try to delete as many information as it could to see if it works.</p></li><li><p>In bitcoind, Genesis block and its information, including time interval, is hard coded, even for genesis block.</p></li><li><p>Bitcoid is easy to compile. But it will occupy 3GB space on disk after compilation. And it takes around an hour to compile. To compile it, their official <a href="https://github.com/bitcoin/bitcoin/tree/f5a623eb66c81d9d7b11206d574430af0127546d/doc" target="_blank" rel="noopener">website</a> described it clearly. </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cryptocurrency Application </category>
          
          <category> Bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website for CS425 project</title>
      <link href="/2019/projects/Website%20for%20CS425%20project/"/>
      <url>/2019/projects/Website%20for%20CS425%20project/</url>
      
        <content type="html"><![CDATA[<h3 id="Reservation-system-website-application-deployed"><a href="#Reservation-system-website-application-deployed" class="headerlink" title="Reservation system website application deployed"></a>Reservation system website application deployed</h3><p>The website made by me for my CS425 project has been deployed and works normally at <a href="https://cs425a.azurewebsites.net" target="_blank" rel="noopener">This Website</a>. In webpage browser is at bottom.</p><p>Source code is at <a href="https://github.com/ShaokangJiang/CS425-project/blob/master/README.md" target="_blank" rel="noopener">My Github Page</a></p><p>This is a website made by using SQL as database and <a href="https://materializecss.com/" target="_blank" rel="noopener">Material Theme</a> as layout. </p><h4 id="Test-account-information"><a href="#Test-account-information" class="headerlink" title="Test account information:"></a>Test account information:</h4><a id="more"></a><table class="highlight1">      <thead>    <tr>        <td>id</td>        <td>priority</td>        <td>password</td>        <td>Name</td>    </tr>    </thead>    <tr>        <td>1</td>        <td>admin</td>        <td>123456</td>        <td></td>    </tr>    <tr>        <td>28</td>        <td>patient</td>        <td>456789</td>        <td>Rebecca Torres</td>    </tr>    <tr>        <td>29</td>        <td>scheduler</td>        <td>789456</td>        <td></td>    </tr>    <tr>        <td>30</td>        <td>medical staff</td>        <td>123789</td>        <td></td>    </tr></table><h4 id="Basic-functions"><a href="#Basic-functions" class="headerlink" title="Basic functions:"></a>Basic functions:</h4><h5 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h5><p>The application must provide a login portal for user to login. The application will validate the user credentials and privileges. For this project you are only required to provide the implementation of managers. </p><h5 id="Privileges"><a href="#Privileges" class="headerlink" title="Privileges"></a>Privileges</h5><p>1- Users with admin privileges can do the following: </p><p>​    a. Schedule an appointment </p><p>​    b. Create new patient </p><p>​    c. Create a new user account </p><p>​    d. Access the business reporting</p><p>2- Users with Doctor/Staff privileges can do the following:</p><p>​    a. View and update patient record</p><p>​    b. Create an Order</p><p>​    c. View calendar and schedule appointment with medical staff</p><p>3- Users with Patient privileges can do the following:</p><p>​    a. View the orders</p><p>​    b. View bills</p><p>4- Users with Scheduler privileges can do the following:</p><p>​    a. View the orders</p><p>​    b. View bills</p><p>​    c. View calendar and schedule appointment with medical staff</p><h5 id="Order-transaction"><a href="#Order-transaction" class="headerlink" title="Order transaction"></a>Order transaction</h5><p>Doctors can order diagnostics for a patient, once the diagnostics are completed and results are available. The system gets updated by medical staff. </p><h5 id="Reporting-and-analytics"><a href="#Reporting-and-analytics" class="headerlink" title="Reporting and analytics"></a>Reporting and analytics</h5><p>The admin will have the capability of running business analytics reports that will help them monitor business operations. </p><p>• Total revenue from all diagnostic</p><p>• Total revenue from each doctor visit </p><p>• Allow patient to view their bills, appointment and medical record</p><p>In webpage demo:</p><iframe src="https://cs425a.azurewebsites.net" width="100%" height="500"></iframe>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website for CS100 project</title>
      <link href="/2017/projects/Website%20for%20CS100%20project/"/>
      <url>/2017/projects/Website%20for%20CS100%20project/</url>
      
        <content type="html"><![CDATA[<h3 id="Hatefate-website-application-deployed"><a href="#Hatefate-website-application-deployed" class="headerlink" title="Hatefate website application deployed"></a>Hatefate website application deployed</h3><p>The website made by me for my CS100 project has been deployed and works normally at <a href="https://hatefate.azurewebsites.net" target="_blank" rel="noopener">This Website</a>. In webpage browser is at bottom.</p><p>Source code is at <a href="https://github.com/ShaokangJiang/CS100Website" target="_blank" rel="noopener">This Github Page</a></p><p>This is a website made by using SQL as database and <a href="https://materializecss.com/" target="_blank" rel="noopener">Material Theme</a> as layout. </p><p>Function included: login via email, login via account name, register, reset password via email, set your favorites, and find people who has the same favorites as you. </p><p>Due to the reason that the domain(huangsk100.me) was expired. This website is for demo only right now. For testing, test account information is as follows:<a id="more"></a> </p><table class="highlight1">    <tr>        <td>Username</td>        <td>Password</td>        <td>Email</td>    </tr>    <tr>        <td>test</td>        <td>123456</td>        <td>123456@example.com</td>    </tr>    <tr>        <td>test01</td>        <td>123456</td>        <td>test01@example.com</td>    </tr>    <tr>        <td>test02</td>        <td>123456</td>        <td>test02@example.com</td>    </tr></table><p>Here is the map for this website:Some functions didn’t implement. </p><p><img src="https://github.com/ShaokangJiang/CS100Website/raw/master/wesite%20(2).png" alt=" "></p><p>The in-browser demo:</p><iframe src="https://hatefate.azurewebsites.net" width="100%" height="500"></iframe>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
