<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>password_test</title>
      <link href="/2019/06/14/password-test/"/>
      <url>/2019/06/14/password-test/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Password is 123. Type password and press enter." />    <label for="pass">Password is 123. Type password and press enter.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+c3kj8PdLbCWiIXSoYARBP/Owxy6yF2Dgb3BfroRECSYG0P740TBvjqz9oNPrkjpzWsaxy3YeUBSSh97YK3SpDDhMYlCk+OMw=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> protected </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build EOSIO local network</title>
      <link href="/2019/06/13/EOSIO_local_network/"/>
      <url>/2019/06/13/EOSIO_local_network/</url>
      
        <content type="html"><![CDATA[<h3 id="Some-experience-on-building-EOSIO-local-network"><a href="#Some-experience-on-building-EOSIO-local-network" class="headerlink" title="Some experience on building EOSIO local network"></a>Some experience on building EOSIO local network</h3><h4 id="Basic-info"><a href="#Basic-info" class="headerlink" title="Basic info"></a>Basic info</h4><p>EOSIO is an application based on proof of stake.<br>The whole system is made up of three components in order to build local environment:</p><ul><li><p><strong>EOS</strong> - Main net. Basic communication </p></li><li><p><strong>EOS.CDT</strong> - Developer package. API for application</p></li><li><p><strong>EOS.CONTRACT</strong> - super user account setup. It store information about different user and send call to system, like create an voter account.</p></li></ul><p>Following is the basic network structure of EOSIO</p><a id="more"></a><ul><li><p>Only one <strong>super account</strong>. It produces blocks based on gensis.json. It can also interact with system to create accounts, register producers.</p></li><li><p>Multiple(21) <strong>block generators</strong>. They will produce(confirm) block once get enough vote</p></li><li><p><strong>Voter</strong>. It could vote producer.</p></li></ul><p>gensis.json is a json file contains the information for the system to produce gensis block. Its structure is as follows:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"initial_timestamp"</span>: <span class="string">"2018-12-05T08:55:11.000"</span>, </span><br><span class="line">  "initial_key": "EOS_PUB_DEV_KEY", 'Only the super account who has the private key relate to this key can produce block'</span><br><span class="line">  "initial_configuration": &#123;</span><br><span class="line">    ... </span><br><span class="line">    "target_block_cpu_usage_pct": 500, 'It doesn't like bitcoind, you could set up everything of the genesis block by yourself.'</span><br><span class="line">    "max_transaction_cpu_usage": 50000,</span><br><span class="line">    "min_transaction_cpu_usage": 100,</span><br><span class="line">    "max_transaction_lifetime": 3600,</span><br><span class="line">    "deferred_trx_expiration_window": 600,</span><br><span class="line">    "max_transaction_delay": 3888000,</span><br><span class="line">    "max_inline_action_size": 4096,</span><br><span class="line">    "max_inline_action_depth": 4,</span><br><span class="line">    "max_authority_depth": 6</span><br><span class="line">  &#125;,</span><br><span class="line">  "initial_chain_id": "0000000000000000000000000000000000000000000000000000000000000000"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For most things in the file is easy to understand. The server is clever, for the string in the json, the server will choose characters he thought it is correct. Confound server thought will be ignored.</p><h5 id="Build-amp-install"><a href="#Build-amp-install" class="headerlink" title="Build &amp; install"></a>Build &amp; install</h5><p>In order to setup a local test environment, EOS.CDT and EOS.CONTRACT have to be compiled on the local machine. Official said EOS is not required to compile locally. But during my test and some hint from <a href="https://github.com/EOSIO/eosio.contracts" target="_blank" rel="noopener">EOS.CONTRACT</a>. It seems it is required. Original official words as follows:</p><blockquote><ol><li><p>First, ensure that your eosio is compiled to the core symbol for the EOSIO blockchain that intend to deploy to.</p></li><li><p>Second, make sure that you have sudo make installed eosio.</p></li><li><p>Then just run the <code>build.sh</code> in the top directory to build all the contracts and the unit tests for these contracts. </p></li></ol></blockquote><blockquote><p>Before compile and run those stuff, make sure the computer has at least 40GB in your home directory and 8GB of memory.  </p></blockquote><p><em>To compile EOS locally, do the following:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/EOSIO/eos --recursive</span><br><span class="line"><span class="built_in">cd</span> eos/</span><br><span class="line">./scripts/eosio_build.sh</span><br></pre></td></tr></table></figure><p>It is also required to install this one into root. The build script is at scripts directory right now. And it may take 3 hours to build.   </p><h1 id="Do-more-at-here"><a href="#Do-more-at-here" class="headerlink" title="//Do more at here"></a>//Do more at here</h1><p><em>Then build <a href="https://github.com/EOSIO/eosio.cdt" target="_blank" rel="noopener">eosio.cdt</a>.</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/eosio/eosio.cdt</span><br><span class="line"><span class="built_in">cd</span> eosio.cdt</span><br><span class="line">./build.sh</span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure><p>There should exist at least 10GB to compile this one.</p><p><em>Then build <a href="https://github.com/EOSIO/eosio.contracts" target="_blank" rel="noopener">eosio.contracts</a>.</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/EOSIO/eosio.contracts.git</span><br><span class="line">cd eosio.contracts/</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>The building process of eosio.cdt and eosio.contracts is nothing special but time consuming. It might take up to 2 hours to build. And it is impossible to build using multiple cores.</p><h5 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h5><p>You need to have an wallet in order to get start. You will have one by doing the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet create --to-console</span><br></pre></td></tr></table></figure><blockquote><p>There is no way to recover password, do remember it.</p></blockquote><p>When you have the password, you could play with cleos. You could use the following command to see full list of subcommand. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>Some useful subcommands are open, unlock, create_key, private_keys. Whenever you want to visit sensitive data, you need to provide the password. To prevent prompted by system, you could use –password to pass in your password.</p><p>Typically, you need to open wallet at first and then unlock to interact with wallet. After all interactions, it is good to lock them.</p><p><em>Batch initialize</em></p><p>The following are scripts might be helpful to initialize for the appropriate data folder and public key-private key pair for multiple(21) nodes.</p><p>To use it, you have to pass in the password as the first attribute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet open</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">DATADIR=<span class="string">"./blockchain"</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$DATADIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir <span class="variable">$DATADIR</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 21 `</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">DATADIR=<span class="string">"./blockchain"</span><span class="variable">$i</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$DATADIR</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir <span class="variable">$DATADIR</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cleos wallet unlock  --password <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 21)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">cleos wallet create_key</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cleos wallet private_keys  --password <span class="variable">$1</span>|grep <span class="string">"\""</span>&gt;list</span><br><span class="line"></span><br><span class="line">python3 a.py <span class="comment">#a.py will be discussed below</span></span><br><span class="line">cleos wallet lock</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>a.py is a python script which will export public-key and private key information into file in case it need to be used in the future. It is always required to have both information of public key and private key when starting a node. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">"list"</span>, <span class="string">"r"</span>) </span><br><span class="line">file1 = open(<span class="string">"li_"</span>, <span class="string">"w"</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">li = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file: </span><br><span class="line">li.append(line.replace(<span class="string">'\"'</span>, <span class="string">''</span>).replace(<span class="string">','</span>,<span class="string">''</span>).replace(<span class="string">' '</span>,<span class="string">''</span>))</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">file1.write(li[i])</span><br><span class="line">file.close()</span><br><span class="line">file1.close()</span><br></pre></td></tr></table></figure><blockquote><p>The key start with EOS and longer is <strong>public key</strong>, like EOS5CZwEpiweHHZpEdHYsU9Q1MEk5zTtqfrcg3TefBzTYG9xdw2gC</p><p>The key which is shorter is <strong>private key</strong>, like this: 5Jarc4qfsXqHcivfGc8qWYTGdQJ5CPy8NeyRjfceXopn9dy3hgR</p></blockquote><p><em>Batch clean</em></p><p>Those are some script that will remove everything. It will make the workspace(including wallet, work folder) be initialized.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DATADIR=<span class="string">"./blockchain"</span></span><br><span class="line">rm -rf <span class="variable">$DATADIR</span>*;</span><br><span class="line"></span><br><span class="line">cleos wallet open</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">cleos wallet unlock --password <span class="variable">$1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> a; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> a;</span><br><span class="line">cleos wallet remove_key <span class="variable">$a</span> --password <span class="variable">$1</span></span><br><span class="line"><span class="keyword">done</span> &lt; li_</span><br><span class="line">rm li_</span><br><span class="line">rm list</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">cleos wallet lock</span><br></pre></td></tr></table></figure><blockquote><p>It is good to clean every time after experiment, otherwise blocks generated will occupy too many space. It is 0.5s/blocks.</p></blockquote><h4 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h4>  <img alt="Basic procedure" src="https://f5q9jg.bn.files.1drv.com/y4mliL3MZo-_SK5igtd3BDqFS-YkT3YaOVmd-cUxFcdCJDQD0PMnvcbKsLs2SeJutQ9ho3B-tSWCjC_pRp3sAWLpUEFQ9X2_h7DL7Xp0N-NwGtkN1WAl_A7Hz83cpZA4EU4EqURUq9j3petzuFUL3vBssnsJuFLAKFsVaDZ34ymT1rcIMmphV2flpeIvGO7SZZsOCWXxtzZVPi4meg5XPGC5A?width=1280&height=720&cropmode=none" width="100%"> <p>This is the basic procedure. The voter account and block generator account are produced by one super account. Generally speaking, the basic idea is voter will vote the producer they like, block producer are connected together. During the runtime, the procedure is:</p><ul><li><p>Firstly, start producer nodes.</p></li><li><p>Next vote</p></li><li><p>When the block producer has enough votes, block producer will go to confirm blocks.</p></li></ul><p>After doing appropriate settings it should start to confirm blocks. I did’t test this part yet.</p><p>If you want or in some situation, you could link super account together like this, but only the one with appropriate public and private key could generate the block. More specifically, only the one has the private key of the public key in the gensis.json can produce block. Other super accounts nodes could only sync. </p><p>The whole structure like this:</p><img alt="Linked structure" src="https://fzq9jg.bn.files.1drv.com/y4mPFY4a8LfbnWohwk35HzA1vDHDQ-CjNYKvRaKxmvLyM40oaDZz6BuFXy6YlJcXsKQ2De1XGM0jRVjCprRnvAs9pD87cLG359wt-xDj-0FpR0TLY_zYwcO1IWDGJKiKQrwiWouefpY1KG5wjiHAUvCNmT1a13oBQedYAB82QLgwRfBw9TB35FMMrx0MCIgJPB2EZVFiBjwt4LeKLQH-g1Viw?width=1280&height=291&cropmode=none" width="100%"><p>You could use the following command to start multiple super account nodes from gensis status and form the structure shown above:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">password = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">print(<span class="string">"Please include password"</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Generate gensis.json</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">file1 = open(<span class="string">"li_"</span>, <span class="string">"r"</span>)</span><br><span class="line">temp = file1.readline()</span><br><span class="line">initial_key = file1.readline()</span><br><span class="line">os.system(<span class="string">'rm -f genesis.json'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"genesis.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">    json.dump(&#123;<span class="string">'initial_timestamp'</span>:<span class="string">"2018-12-05T08:55:11.000"</span>, <span class="string">'initial_key'</span>: initial_key[:<span class="number">-1</span>], <span class="string">'initial_configuration'</span>:&#123;<span class="string">"max_block_net_usage"</span>: <span class="number">1048576</span>, <span class="string">"target_block_net_usage_pct"</span>: <span class="number">1000</span>, <span class="string">"max_transaction_net_usage"</span>: <span class="number">524288</span>, <span class="string">"base_per_transaction_net_usage"</span>: <span class="number">12</span>, <span class="string">"net_usage_leeway"</span>: <span class="number">500</span>, <span class="string">"context_free_discount_net_usage_num"</span>: <span class="number">20</span>, <span class="string">"context_free_discount_net_usage_den"</span>: <span class="number">100</span>, <span class="string">"max_block_cpu_usage"</span>: <span class="number">100000</span>, <span class="string">"target_block_cpu_usage_pct"</span>: <span class="number">500</span>, <span class="string">"max_transaction_cpu_usage"</span>: <span class="number">50000</span>, <span class="string">"min_transaction_cpu_usage"</span>: <span class="number">100</span>, <span class="string">"max_transaction_lifetime"</span>: <span class="number">3600</span>, <span class="string">"deferred_trx_expiration_window"</span>: <span class="number">600</span>, <span class="string">"max_transaction_delay"</span>: <span class="number">3888000</span>, <span class="string">"max_inline_action_size"</span>: <span class="number">4096</span>, <span class="string">"max_inline_action_depth"</span>: <span class="number">4</span>, <span class="string">"max_authority_depth"</span>: <span class="number">6</span> &#125;,  <span class="string">"initial_chain_id"</span>: <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span>&#125;, outfile, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Start gensis</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">ini_port=<span class="number">9000</span></span><br><span class="line">currentport=ini_port</span><br><span class="line">sentstring=<span class="string">'./genesis_start.sh '</span>+<span class="string">'./blockchain'</span>+<span class="string">' '</span>+initial_key[:<span class="number">-1</span>]+<span class="string">' '</span>+temp[:<span class="number">-1</span>]+<span class="string">' '</span>+str(currentport)+<span class="string">' '</span>+str(currentport+<span class="number">100</span>)+<span class="string">' '</span>+str(currentport+<span class="number">101</span>)</span><br><span class="line">os.system(<span class="string">'echo Start gensis'</span>)</span><br><span class="line">os.system(sentstring)</span><br><span class="line">currentport+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">30</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">start nodes</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">22</span>):</span><br><span class="line">private_key = file1.readline()</span><br><span class="line">public_key = file1.readline()</span><br><span class="line">tosend = <span class="string">'./genesis_start.sh '</span>+<span class="string">'./blockchain'</span>+str(i)+<span class="string">' '</span>+public_key[:<span class="number">-1</span>]+<span class="string">' '</span>+private_key[:<span class="number">-1</span>]+<span class="string">' '</span>+str(currentport)+<span class="string">' '</span>+str(currentport+<span class="number">100</span>)+<span class="string">' '</span>+str(currentport+<span class="number">99</span>)</span><br><span class="line">os.system(<span class="string">'echo start node '</span>+ str(i))</span><br><span class="line">os.system(tosend)</span><br><span class="line">currentport+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>For this python code, it first generates the gensis.json. And then it starts nodes in some order(First gensis node, then other super accounts). All public key and private key used is based on the file generated previously. To use it, you have to put the password of the wallet as the first attribute pass in when you run the program. The script did so, in case it needs to deal with sensitive information.</p><p>The follow script is in a file called genesis_start.sh, which is called by the previous python program to start each node:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#$1--datadir $2--Public_key $3--Private_key $4--httpserver $5--p2plisten $6--peer_address</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> ] &amp;&amp; [ <span class="variable">$2</span> ] &amp;&amp; [ <span class="variable">$3</span> ] &amp;&amp; [ <span class="variable">$4</span> ] &amp;&amp; [ <span class="variable">$5</span> ] &amp;&amp; [ <span class="variable">$6</span> ]; <span class="keyword">then</span></span><br><span class="line">DATADIR=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">nodeos \</span><br><span class="line">--genesis-json <span class="variable">$DATADIR</span><span class="string">"/../genesis.json"</span> \</span><br><span class="line">--signature-provider <span class="variable">$2</span>=KEY:<span class="variable">$3</span> \</span><br><span class="line">--plugin eosio::producer_plugin \</span><br><span class="line">--plugin eosio::chain_api_plugin \</span><br><span class="line">--plugin eosio::http_plugin \</span><br><span class="line">--plugin eosio::history_api_plugin \</span><br><span class="line">--data-dir <span class="variable">$DATADIR</span><span class="string">"/data"</span> \</span><br><span class="line">--blocks-dir <span class="variable">$DATADIR</span><span class="string">"/blocks"</span> \</span><br><span class="line">--config-dir <span class="variable">$DATADIR</span><span class="string">"/config"</span> \</span><br><span class="line">--producer-name eosio \</span><br><span class="line">--http-server-address 127.0.0.1:<span class="variable">$4</span> \</span><br><span class="line">--p2p-listen-endpoint 127.0.0.1:<span class="variable">$5</span> \</span><br><span class="line">--access-control-allow-origin=* \</span><br><span class="line">--contracts-console \</span><br><span class="line">--http-validate-host=<span class="literal">false</span> \</span><br><span class="line">--verbose-http-errors \</span><br><span class="line">--<span class="built_in">enable</span>-stale-production \</span><br><span class="line">--p2p-peer-address localhost:<span class="variable">$6</span> \</span><br><span class="line">&gt;&gt; <span class="variable">$DATADIR</span><span class="string">"/nodeos.log"</span> 2&gt;&amp;1 &amp; \</span><br><span class="line"><span class="built_in">echo</span> $! &gt; <span class="variable">$DATADIR</span><span class="string">"/eosd.pid"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>This script will start a new node by using information given by user. To use it manually, just use <code>./genesis_start.sh [datadir] [Public_key] [Private_key] [httpserver] [p2plisten] [peer_address]</code></p><blockquote><p>If you get an information of “This is not an executable file”. Just do <code>chmod 777 genesis_start.sh</code></p></blockquote><p>I think those scripts are still useful for the following reason:</p><ul><li>The producer has option about the super account node it reports. It could make the main node not too stressful when lots of submission happens(I guess). </li><li>By modifying them a little bit, they could also be used to generate multiple block producer and voters.</li></ul><p>And I find out only the linked structure will be accepted. It means multiple connections to one super account node is not permitted. More detailed, as the graph show below:<br>      <img alt="Multi conn not allowed" src="https://fzq8jg.bn.files.1drv.com/y4m9X87KWyMymAB7T60SBAoK0DvuSQsPDRoSqIYl1A-6crJca50nXk36T0G2crGK2PISAJLGzaM5Z-XAVcpQTMwARR8VuQpZlZwz5w7WTmuVQWaD8hEHEt2bmFVH0HJpP_gl5fWdfIaXHw-ZIE8RHQU2slcf3fPLgmnQGZMLvIX8TDnPBUVWLe-JCKBzQtCSqRasTyWT2AmMOPsiUweCl-C9A?width=1280&height=519&cropmode=none" width="100%"></p><blockquote><p>To make the system recognize an account is block producer, it is required to use regproducer like the following. Otherwise it is just a voter.</p></blockquote><h4 id="Special-notice"><a href="#Special-notice" class="headerlink" title="Special notice"></a>Special notice</h4><ul><li><p>Actually, I can not compile the EOSIO. I am analyzing the reason right now. Whenever I have the idea, I could have a more detailed notice list at here.</p></li><li><p>EOS.CONTRACT is based on locally compiled EOS. </p></li><li><p>To compile EOS locally, it has to use git clone. You can not download from source and compile.</p></li><li><p>the compilaction requires lots of space. It is good to remain 40GB of disk and 8GB of memory. It also takes around 5 hours to compile</p></li><li><p>They can only be compiled at the current user’s home directory </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cryptocurrency Application </category>
          
          <category> EOSIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eos </tag>
            
            <tag> eosio.contracts </tag>
            
            <tag> eos.cdt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Bitcoin local network</title>
      <link href="/2019/06/13/Bitcoin_local_network/"/>
      <url>/2019/06/13/Bitcoin_local_network/</url>
      
        <content type="html"><![CDATA[<h3 id="Some-experience-on-building-Bitcoin-local-network"><a href="#Some-experience-on-building-Bitcoin-local-network" class="headerlink" title="Some experience on building Bitcoin local network"></a>Some experience on building Bitcoin local network</h3><h4 id="Basic-info"><a href="#Basic-info" class="headerlink" title="Basic info"></a>Basic info</h4><p>Bitcoin is an client based on proof of work(POW). </p><p>Bitcoin core is a client of official bitcoin network. After some tests, I find the local network for bitcoin is good for testing wallet application but hard for testing mining function.  In this page, I am going to discuss some experience of mine on building the local test environment for bitcoin core. </p><h5 id="Compile-amp-Installation"><a href="#Compile-amp-Installation" class="headerlink" title="Compile &amp; Installation"></a>Compile &amp; Installation</h5><a id="more"></a><p>For ubuntu, just do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev libqrencode-dev </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bitcoin/bitcoin.git</span><br><span class="line"><span class="built_in">cd</span> bitcoin</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install <span class="comment"># optional</span></span><br></pre></td></tr></table></figure><p>For other system, official has a page at <a href="https://github.com/bitcoin/bitcoin/tree/master/doc" target="_blank" rel="noopener">here</a> described how to build and install.</p><p>Bitcoin core contains three different networks, mainnet, regtest and testnet. The difference of those three networks are as follows:</p><h5 id="Mainnet"><a href="#Mainnet" class="headerlink" title="Mainnet"></a>Mainnet</h5><blockquote><p>The original and <strong>main network</strong> for Bitcoin transactions, where satoshis have <strong>real economic value.</strong>     </p></blockquote><p>  As we could see above, mainnet is the main network of bitcoin core. It has the <strong>real economic value</strong>, which means it has lots of restriction. And it make me hard to implement it locally. On the main net, I tried lots of different ways, including connect it with a virtual network, do not connect with network and change some source code. But none of them successfully build a local network. </p><p><em>To start a node under main net, just do: (The default port is 8444/8443)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind</span><br></pre></td></tr></table></figure><p><em>To use rpc to communicate, do the following: (datadir should exist at first)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/A/ -pid=<span class="variable">$HOME</span>/A/.pid -debug -daemon <span class="comment">#-daemon for running in background -debug to get detailed output</span></span><br></pre></td></tr></table></figure><p>In some old version, password and username can not be the same.</p><p><em>To connect to a specific node, use -connect tag.</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -connect=127.0.0.1:17592 -datadir=<span class="variable">$HOME</span>/A/ -pid=<span class="variable">$HOME</span>/A/.pid -debug -daemon</span><br></pre></td></tr></table></figure><p>-reindex-chainstate(Rebuild chain state from the currently indexed blocks ) and -reindex(Rebuild chain state and block index from the blk*.dat files on disk ) might be helpful some time. If need them, just add them to the end of the startup code</p><p><em>Use the following code to start 5 nodes and connect them together under main net:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/ -connect=127.0.0.1:17592 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17592 -rpcuser=123 -rpcpassword=123 -rpcport=16592 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17593 -rpcuser=123 -rpcpassword=123 -rpcport=16593 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17594 -rpcuser=123 -rpcpassword=123 -rpcport=16594 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17595 -rpcuser=123 -rpcpassword=123 -rpcport=16595 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/ -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/.pid -debug</span><br></pre></td></tr></table></figure><p>Those data dir should exist. To check them:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATADIR=<span class="string">"~/test/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A B C D E</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$DATADIR</span><span class="variable">$i</span> ]; <span class="keyword">then</span></span><br><span class="line">  mkdir -p <span class="variable">$DATADIR</span><span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>If you want to restart a new test or changed the version of bitcoind running on the machine(from high version to low version). You have to delete the datadir: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATADIR=<span class="string">"~/test/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A B C D E</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$DATADIR</span><span class="variable">$i</span> ]; <span class="keyword">then</span></span><br><span class="line">  rm -rf <span class="variable">$DATADIR</span><span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>To get info from any node by using rpc command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoin-cli -rpcport=16591 -rpcuser=123 -rpcpassword=123 RPC_COMMAND</span><br></pre></td></tr></table></figure><p>RPC_COMMAND are commands like getpeerinfo, getblocktemplpate, getmininginfo, or some commands about transaction. The full list is on <a href="https://bitcoincore.org/en/doc/0.17.0/" target="_blank" rel="noopener">Bitcoin Core 0.17.0 RPC</a></p><p><strong>bitcoin-cli</strong> is just a communication tool. So, you could use the same command to communicate with different nodes in different model(mainnet, testnet, regtest). </p><p>Moreover, you could also use it to communicate with other project’s node forked from bitcoind, like litecoind.</p><h5 id="Regtest"><a href="#Regtest" class="headerlink" title="Regtest"></a>Regtest</h5><blockquote><p>A local testing environment in which developers can almost instantly <strong>generate blocks on demand</strong> for testing events, and can create private satoshis with no real-world value.</p></blockquote><p><strong>generate blocks on demand</strong> means it is not real case. It is fake mining. An easy example is it produce block quick and producer doesn’t get award they should have. Another example is the normal case should have nonce 0-0xfffff. But it only have nonce 0-4 for every block. So, it is a good tool to test transaction and wallet application locally.</p><p><em>To start a node under regtest, just do: (The default port is 18444/18443)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -regtest</span><br></pre></td></tr></table></figure><p>The other commands like whatever at the first part of main net. Just add the -regtest tag to the program.</p><p><em>Use the following code to start 5 nodes and connect them together under regtest:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/ -regtest -connect=127.0.0.1:17592 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17592 -rpcuser=123 -rpcpassword=123 -rpcport=16592 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17593 -rpcuser=123 -rpcpassword=123 -rpcport=16593 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17594 -rpcuser=123 -rpcpassword=123 -rpcport=16594 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17595 -rpcuser=123 -rpcpassword=123 -rpcport=16595 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/ -regtest -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/.pid -debug</span><br></pre></td></tr></table></figure><p>Those data dir should exist. See the former part for the way to do those procedure       </p><p>Though it is possible to use command represented before, the official recommend to use this one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoin-cli -regtest -rpcport=16591 -rpcuser=123 -rpcpassword=123 RPC_COMMAND</span><br></pre></td></tr></table></figure><p>RPC_COMMAND are commands like getpeerinfo, getblocktemplpate, getmininginfo, or some commands about transaction. The full list is on <a href="https://bitcoincore.org/en/doc/0.17.0/" target="_blank" rel="noopener">Bitcoin Core 0.17.0 RPC</a></p><h5 id="Testnet"><a href="#Testnet" class="headerlink" title="Testnet"></a>Testnet</h5><blockquote><p>A global testing environment in which developers can obtain and spend satoshis that have <strong>no real-world value</strong> on a network that is <strong>very similar</strong> to the Bitcoin mainnet.</p></blockquote><p><strong>very similar</strong> means it is likely to be the same as the main net. <strong>no real-world value</strong> means you could get some points free online.    </p><p>By comparing with mainnet, it seems there is restriction on the height on the testnet, which means difficulty has restriction. Right now, it is at the version 3. Its version could be changed by developer, but it is hardcoded. Difficulty does change when the height being higher and higher. And most things are similar to mainnet. It also has the same restrictions as the main net. So, testnet is best for testing transaction application and wallet application.</p><p>To start a node under testnet, just do: (The default port is 18444/18443)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoind -testnet</span><br></pre></td></tr></table></figure><p>The other commands like whatever at the first part of main net. Just add the -testnet tag to the program.   </p><p>Use the following code to start 5 nodes and connect them together under testnet:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bitcoind -server -listen -port=17591 -rpcuser=123 -rpcpassword=123 -rpcport=16591 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/ -testnet -connect=127.0.0.1:17592 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/A/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17592 -rpcuser=123 -rpcpassword=123 -rpcport=16592 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/B/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17593 -rpcuser=123 -rpcpassword=123 -rpcport=16593 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/C/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17594 -rpcuser=123 -rpcpassword=123 -rpcport=16594 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/D/.pid -debug</span><br><span class="line">bitcoind -server -listen -port=17595 -rpcuser=123 -rpcpassword=123 -rpcport=16595 -datadir=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/ -testnet -connect=127.0.0.1:17591 -pid=<span class="variable">$HOME</span>/<span class="built_in">test</span>/E/.pid -debug</span><br></pre></td></tr></table></figure><p>Those data dir should exist. See the former part for the way to do those procedure</p><p>Though it is possible to use command represented before, the official recommend to use this one:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcoin-cli -testnet -rpcport=16591 -rpcuser=123 -rpcpassword=123 RPC_COMMAND</span><br></pre></td></tr></table></figure><p>RPC_COMMAND are commands like getpeerinfo, getblocktemplpate, getmininginfo, or some commands about transaction. The full list is on <a href="https://bitcoincore.org/en/doc/0.17.0/" target="_blank" rel="noopener">Bitcoin Core 0.17.0 RPC</a></p><h5 id="Version-difference"><a href="#Version-difference" class="headerlink" title="Version difference"></a>Version difference</h5>  <img alt="Version difference" src="https://h59ygg.bn.files.1drv.com/y4mi5rh-SwSuFKvGvOs_EIQFjXefs1P_ViKroareW_mtIrjAE_zF4160tywav8iK4hgNfGuu87DXGP4gD-kvkFTxi-TEMXjXHcxSQaudMBhQf7KfoHV6hv_MWClF6czkxt7jwKQA7AOQbSCR1YwEcVX9ouTRmH6CKA26mAayQXnIK7O04Yt9A1dl0sg4AKKvcZWvg7l9DqK0QSD7f1gzZbGJw?width=1280&height=720&cropmode=none" width="100%"><p>The bubble is the separator of different version. Litecoind is forked out from bitcoind since 0.16.3. The methods talked above, getblocktemplate, is only for mainnet or testnet. For the regtest net, there is only one method, generate or generatetoaddress. <strong>0.17.9</strong> remove wallet functions like listaccounts. It also remove generate function. To confirm a block on regtest, use generatetoaddress instead.</p><h5 id="To-connect-nodes"><a href="#To-connect-nodes" class="headerlink" title="To connect nodes"></a>To connect nodes</h5><img alt="Basic structure" src="https://fpqpjg.bn.files.1drv.com/y4mXqpE6NGGZOHb58ocVVjMxMYZ_UM-D9IWy5CWPwqGXHIxRYk7nQncfdf9We3Cf9nva_kWx6fiKELZzbgUqH1sxr0Mx5Byu_B33dIyiULR7wPMQgOkcrM6_wu_YTadEZxndBs_y5RyS5G2YlE6tpQ9HhZqG_DNxtftVvErHpzPV1ELwiJ0UKya-ie1pfjjKuozoag40X8sMsNgaZY2nbXVgA?width=1280&height=720&cropmode=none" width="100%"><p>This graph is the basic way to connect nodes. The miner is always separate with the main net. Loop connection is permitted but not required. In order to start using mining feature(getblocktemplate). Be sure to have at least two nodes connected. Actually, there are more restriction than this. </p><h4 id="To-confirm-a-block"><a href="#To-confirm-a-block" class="headerlink" title="To confirm a block"></a>To confirm a block</h4>  <img alt="Structure to mine" src="https://fp8bjw.bn.files.1drv.com/y4mdRutIlghFFflWeN_puKMs_4LpZsI8wk9IWOQ3lhXixvxVuoO6OK3VeBB4TNLaFIdGO0NIGJVmFkyZxVoxhpYvoHo3USjmB1n3R3EsLAOaopAUvz5nVWqFp1ojkL-zWeeWDRsff0cVx8HcvXMF21RFXsgw9ez4re7vUudQKVeyELWlfOGycyNM56xibsw9NgcEbO5uwRSgJPXllE_qW_4dg?width=1280&height=720&cropmode=none" width="100%"><p><strong>Bitcoin core full node</strong> is the client start by bitcoind by using command in the previous section.</p><p>Above is the basic structure for mining(confirm a block). If no other things happen, one block will be completely confirmed 100 blocks later. The confirm interval is 100 blocks.</p><p><strong>Getblocktemplate</strong> is a method which will return the following structure as a return result as a json for the miner to use, which contains information miner need. The structure looks like this:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"result"</span>:&#123;</span><br><span class="line">      <span class="attr">"capabilities"</span>:[<span class="string">"proposal"</span>],</span><br><span class="line">      ...</span><br><span class="line">      "previousblockhash":"756c7b16ef069c782fe6faf9e393483821261206fe110d409c11fbc4a0b927b0",</span><br><span class="line">      "transactions":[], 'Transactions information could be used for next block'</span><br><span class="line">      "coinbaseaux":&#123;"flags":""&#125;, 'miner will use this and the nest value to build coinbase'</span><br><span class="line">      "coinbasevalue":5000000000, 'bonus people have'</span><br><span class="line">      "longpollid":"756c7b16ef069c782fe6faf9e393...06fe110d409c11fbc4a0b927b02", 'bitcoind technique'</span><br><span class="line">      "target":"7fffff0000000000000000000000000000000000000000000000000000000000", </span><br><span class="line">      "mintime":1550614864,</span><br><span class="line">      "noncerange":"00000000ffffffff",</span><br><span class="line">  ...</span><br><span class="line">      "bits":"207fffff",</span><br><span class="line">      "height":4,</span><br><span class="line">      ...</span><br><span class="line">   &#125;,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After version <strong>0.17.9</strong>. You have to attach the argument segwit in order to get a return. Their official said this is safer. In order to attach argument, it is recommend to use curl:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user 123 --data-binary <span class="string">'&#123;"id": 1, "method": "getblocktemplate", "params": [&#123;"rules": ["segwit"], "capabilities": ["coinbasetxn", "workid", "coinbase/append"]&#125;]&#125;'</span> -H <span class="string">'content-type: text/plain;'</span> http://127.0.0.1:16592/</span><br></pre></td></tr></table></figure><p><strong>Miners</strong> are softwares used for mining</p><p>If you are using Miner software, then you don’t have to understand what getblocktemplate get. Miner software will handle them. But you have to make sure the Getblocktemplate method is working and coinbasevalue exist and it is not 0.</p><blockquote><p>To make the coinbasevalue exist and it is not 0, it might be helpful to make sure <a href="https://github.com/bitcoin/libblkmaker" target="_blank" rel="noopener">libblkmaker</a>compile successfully. Because there is some library dependence required. And Getblocktemplate never tell you what is the dependence and the main bitcoin core could compile without it. Maybe there are some better ways. But I fix every dependences by compile libblkmaker. I think it is because they use the same dependence at somewhere. But some people also say bitcoin’s getblocktemplate relay on libblkmaker. </p></blockquote><p>There are two official recommend and commonly used miner. <a href="https://bitcointalk.org/?topic=877081" target="_blank" rel="noopener">BFGMiner</a> and <a href="https://bitcointalk.org/?topic=877081" target="_blank" rel="noopener">Cgminer</a>. </p><p><em>To start solo mining by using <strong>BFGMiner</strong>:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bfgminer -o http://127.0.0.1:16592 -u 123 -p 123 --generate-to <span class="string">"PUBLIC_ADDRESS"</span> --coinbase-sig <span class="string">"rig1: This is Joe's block!"</span> --net-delay</span><br></pre></td></tr></table></figure><p>–coinbase-sig is for comments, it is not required</p><p>–net-delay is to make it don’t communicate with server too frequently.</p><p>You could use -S to specify hardware you want to use:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bfgminer -S opencl:auto -o http://127.0.0.1:16592 -u 123 -p 123 --generate-to <span class="string">"PUBLIC_ADDRESS"</span></span><br></pre></td></tr></table></figure><p><em>To start solo mining by using <strong>Cgminer</strong>:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cgminer -o http://localhost:8332 -u username -p password --btc-address PUBLIC_ADDRESS</span><br></pre></td></tr></table></figure><p>This is from the official website, I did’t test it. It requires to use FPGA and ASIC miner.</p><p>If you want to build a miner from scratch, official do provide some instructions at their <a href="https://en.bitcoin.it/wiki/Getblocktemplate#For_developers" target="_blank" rel="noopener">website</a></p><p>Actually, if you just want to build a miner application, most of people choose to make their application based on the <a href="https://github.com/bitcoin/libblkmaker" target="_blank" rel="noopener">libblkmaker</a> official provided.</p><h4 id="Special-note"><a href="#Special-note" class="headerlink" title="Special note"></a>Special note</h4><ol><li>In order to simulate a real network case that lots of transaction happens every second, you could use the following code:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 1000)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  bitcoin-cli -regtest -rpcport=16591 -rpcuser=123 -rpcpassword=123 sendtoaddress <span class="string">"PUBLIC_ADDRESS"</span> 0.0001</span><br><span class="line">  sleep 2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>Build Path should be correct. If you change the path of compiled file, you have to reconfigure and recompile before install or do other implementation.<br>Bitcoind is not friendly for mining locally</p></li><li><p>For mainnet and testnet, they set up some restriction. So getblocktemplate never works. The coding for getblocktemplate is in <a href="https://github.com/bitcoin/bitcoin/blob/adc55dbac5b521d6c9df58d1d69075e6abf0116f/src/rpc/mining.cpp#L292" target="_blank" rel="noopener">mining.cpp</a> Maybe I need to look through source in order to check where is the real restriction. But I guess they setup multiple restrictions. One I found is at <a href="https://github.com/bitcoin/bitcoin/blob/f5a623eb66c81d9d7b11206d574430af0127546d/src/chainparams.cpp" target="_blank" rel="noopener">chainparams.cpp</a>. It is also a direction to try to delete as many information as it could to see if it works.</p></li><li><p>In bitcoind, Genesis block and its information, including time interval, is hard coded, even for genesis block.</p></li><li><p>Bitcoid is easy to compile. But it will occupy 3GB space on disk after compilation. And it takes around an hour to compile. To compile it, their official <a href="https://github.com/bitcoin/bitcoin/tree/f5a623eb66c81d9d7b11206d574430af0127546d/doc" target="_blank" rel="noopener">website</a> described it clearly. </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cryptocurrency Application </category>
          
          <category> Bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website for CS425 project</title>
      <link href="/2019/05/05/projects/Website%20for%20CS425%20project/"/>
      <url>/2019/05/05/projects/Website%20for%20CS425%20project/</url>
      
        <content type="html"><![CDATA[<p>The website made by me for my CS425 project has been deployed and works normally at <a href="https://cs425a.azurewebsites.net" target="_blank" rel="noopener">This Website</a>.</p><p>Source code is at <a href="/">My Github Page</a></p><p>This is a website made by using SQL as database and <a href="https://materializecss.com/" target="_blank" rel="noopener">Material Theme</a> as layout. </p><p>Test account information:</p><a id="more"></a><table class="highlight1">      <thead>    <tr>        <td>id</td>        <td>priority</td>        <td>password</td>        <td>Name</td>    </tr>    </thead>    <tr>        <td>1</td>        <td>admin</td>        <td>123456</td>        <td></td>    </tr>    <tr>        <td>28</td>        <td>patient</td>        <td>456789</td>        <td>Rebecca Torres</td>    </tr>    <tr>        <td>29</td>        <td>scheduler</td>        <td>789456</td>        <td></td>    </tr>    <tr>        <td>30</td>        <td>medical staff</td>        <td>123789</td>        <td></td>    </tr></table>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website for CS100 project</title>
      <link href="/2017/12/05/projects/Website%20for%20CS100%20project/"/>
      <url>/2017/12/05/projects/Website%20for%20CS100%20project/</url>
      
        <content type="html"><![CDATA[<h3 id="Hatefate-website-application-deployed"><a href="#Hatefate-website-application-deployed" class="headerlink" title="Hatefate website application deployed"></a>Hatefate website application deployed</h3><p>The website made by me for my CS100 project has been deployed and works normally at <a href="https://hatefate.azurewebsites.net" target="_blank" rel="noopener">This Website</a>.</p><p>Source code is at <a href="/">My Github Page</a></p><p>This is a website made by using SQL as database and <a href="https://materializecss.com/" target="_blank" rel="noopener">Material Theme</a> as layout. </p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
